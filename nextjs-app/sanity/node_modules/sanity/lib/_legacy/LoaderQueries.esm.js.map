{"version":3,"file":"LoaderQueries.esm.js","sources":["../../src/presentation/loader/LoaderQueries.tsx"],"sourcesContent":["import {\n  type ClientConfig,\n  type ClientPerspective,\n  type ContentSourceMap,\n  type QueryParams,\n  type SyncTag,\n} from '@sanity/client'\nimport {applySourceDocuments, getPublishedId} from '@sanity/client/csm'\nimport {\n  type ChannelInstance,\n  type Controller,\n  createConnectionMachine,\n  type StatusEvent,\n} from '@sanity/comlink'\nimport {\n  createCompatibilityActors,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@sanity/presentation-comlink'\nimport {applyPatch} from 'mendoza'\nimport LRUCache from 'mnemonist/lru-cache-with-delete'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {\n  type SanityClient,\n  type SanityDocument,\n  useClient,\n  // useCurrentUser,\n  useDataset,\n  useProjectId,\n} from 'sanity'\n\nimport {\n  LIVE_QUERY_CACHE_BATCH_SIZE,\n  LIVE_QUERY_CACHE_SIZE,\n  MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n} from '../constants'\nimport {\n  type LiveQueriesState,\n  type LiveQueriesStateValue,\n  type LoaderConnection,\n  type PresentationPerspective,\n} from '../types'\nimport {type DocumentOnPage} from '../useDocumentsOnPage'\nimport {mapChangedValue, useQueryParams, useRevalidate} from './utils'\n\nexport interface LoaderQueriesProps {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  controller: Controller | undefined\n  perspective: ClientPerspective\n  documentsOnPage: {_id: string; _type: string}[]\n  onLoadersConnection: (event: StatusEvent) => void\n  onDocumentsOnPage: (\n    key: string,\n    perspective: PresentationPerspective,\n    state: DocumentOnPage[],\n  ) => void\n}\n\nexport default function LoaderQueries(props: LoaderQueriesProps): React.JSX.Element {\n  const {\n    liveDocument,\n    controller,\n    perspective: activePerspective,\n    documentsOnPage,\n    onLoadersConnection,\n    onDocumentsOnPage,\n  } = props\n\n  const [comlink, setComlink] = useState<ChannelInstance<LoaderControllerMsg, LoaderNodeMsg>>()\n  const [liveQueries, setLiveQueries] = useState<LiveQueriesState>({})\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  useEffect(() => {\n    const interval = setInterval(\n      () =>\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        setLiveQueries((liveQueries) => {\n          if (Object.keys(liveQueries).length < 1) {\n            return liveQueries\n          }\n\n          const now = Date.now()\n          const hasAnyExpired = Object.values(liveQueries).some(\n            // eslint-disable-next-line max-nested-callbacks\n            (liveQuery) =>\n              liveQuery.heartbeat !== false && now > liveQuery.receivedAt + liveQuery.heartbeat,\n          )\n          if (!hasAnyExpired) {\n            return liveQueries\n          }\n          const next = {} as LiveQueriesState\n          for (const [key, value] of Object.entries(liveQueries)) {\n            if (value.heartbeat !== false && now > value.receivedAt + value.heartbeat) {\n              continue\n            }\n            next[key] = value\n          }\n          return next\n        }),\n      MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n    )\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    if (controller) {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const comlink = controller.createChannel<LoaderControllerMsg, LoaderNodeMsg>(\n        {\n          name: 'presentation',\n          connectTo: 'loaders',\n          heartbeat: true,\n        },\n        createConnectionMachine<LoaderControllerMsg, LoaderNodeMsg>().provide({\n          actors: createCompatibilityActors<LoaderControllerMsg>(),\n        }),\n      )\n      setComlink(comlink)\n\n      comlink.onStatus(onLoadersConnection)\n\n      comlink.on('loader/documents', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          onDocumentsOnPage(\n            'loaders',\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data.perspective as unknown as any,\n            data.documents,\n          )\n        }\n      })\n\n      comlink.on('loader/query-listen', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          if (\n            typeof data.heartbeat === 'number' &&\n            data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n          ) {\n            throw new Error(\n              `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n            )\n          }\n          setLiveQueries((prev) => ({\n            ...prev,\n            [getQueryCacheKey(data.query, data.params)]: {\n              perspective: data.perspective,\n              query: data.query,\n              params: data.params,\n              receivedAt: Date.now(),\n              heartbeat: data.heartbeat ?? false,\n            } satisfies LiveQueriesStateValue,\n          }))\n        }\n      })\n\n      return comlink.start()\n    }\n    return undefined\n  }, [controller, dataset, onDocumentsOnPage, onLoadersConnection, projectId])\n\n  const [cache] = useState(() => new LRUCache<string, SanityDocument>(LIVE_QUERY_CACHE_SIZE))\n  const studioClient = useClient({apiVersion: '2023-10-16'})\n  const clientConfig = useMemo(() => studioClient.config(), [studioClient])\n  const client = useMemo(\n    () =>\n      studioClient.withConfig({\n        resultSourceMap: 'withKeyArraySelector',\n      }),\n    [studioClient],\n  )\n  useEffect(() => {\n    if (comlink) {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const {projectId, dataset} = clientConfig\n      comlink.post('loader/perspective', {\n        projectId: projectId!,\n        dataset: dataset!,\n        perspective: activePerspective,\n      })\n    }\n  }, [comlink, clientConfig, activePerspective])\n\n  const turboIds = useMemo(() => {\n    const documentsActuallyInUse = documentsOnPage.map(({_id}) => _id)\n    const set = new Set(documentsActuallyInUse)\n    const ids = [...set]\n    const max = cache.capacity\n    if (ids.length >= max) {\n      ids.length = max\n    }\n    return ids\n  }, [cache.capacity, documentsOnPage])\n\n  const [documentsCacheLastUpdated, setDocumentsCacheLastUpdated] = useState(0)\n\n  return (\n    <>\n      <Turbo\n        cache={cache}\n        client={client}\n        turboIds={turboIds}\n        setDocumentsCacheLastUpdated={setDocumentsCacheLastUpdated}\n      />\n      {Object.entries(liveQueries).map(([key, {query, params, perspective}]) => (\n        <QuerySubscription\n          key={`${key}${perspective}`}\n          cache={cache}\n          projectId={clientConfig.projectId!}\n          dataset={clientConfig.dataset!}\n          perspective={perspective}\n          query={query}\n          params={params}\n          comlink={comlink}\n          client={client}\n          refreshInterval={activePerspective ? 2000 : 0}\n          liveDocument={liveDocument}\n          documentsCacheLastUpdated={documentsCacheLastUpdated}\n        />\n      ))}\n    </>\n  )\n}\n\ninterface SharedProps {\n  /**\n   * The Sanity client to use for fetching data and listening to mutations.\n   */\n  client: SanityClient\n  /**\n   * How frequently queries should be refetched in the background to refresh the parts of queries that can't be source mapped.\n   * Setting it to `0` will disable background refresh.\n   * @defaultValue 10000\n   */\n  refreshInterval?: number\n  /**\n   * The documents cache to use for turbo-charging queries.\n   */\n  cache: LRUCache<string, SanityDocument>\n}\n\ninterface TurboProps extends Pick<SharedProps, 'client' | 'cache'> {\n  turboIds: string[]\n  setDocumentsCacheLastUpdated: (timestamp: number) => void\n}\n/**\n * A turbo-charged mutation observer that uses Content Source Maps to apply mendoza patches on your queries\n */\nconst Turbo = memo(function Turbo(props: TurboProps) {\n  const {cache, client, turboIds, setDocumentsCacheLastUpdated} = props\n  // Figure out which documents are missing from the cache\n  const [batch, setBatch] = useState<string[][]>([])\n  useEffect(() => {\n    const batchSet = new Set(batch.flat())\n    const nextBatch = new Set<string>()\n    for (const turboId of turboIds) {\n      if (!batchSet.has(turboId) && !cache.has(turboId)) {\n        nextBatch.add(turboId)\n      }\n    }\n    const nextBatchSlice = [...nextBatch].slice(0, LIVE_QUERY_CACHE_BATCH_SIZE)\n    if (nextBatchSlice.length === 0) return undefined\n    const raf = requestAnimationFrame(() =>\n      // eslint-disable-next-line max-nested-callbacks\n      setBatch((prevBatch) => [...prevBatch.slice(-LIVE_QUERY_CACHE_BATCH_SIZE), nextBatchSlice]),\n    )\n    return () => cancelAnimationFrame(raf)\n  }, [batch, cache, turboIds])\n\n  // Use the same listen instance and patch documents as they come in\n  useEffect(() => {\n    const subscription = client\n      .listen(\n        '*',\n        {},\n        {\n          events: ['mutation'],\n          effectFormat: 'mendoza',\n          includePreviousRevision: false,\n          includeResult: false,\n          tag: 'presentation-loader',\n        },\n      )\n      .subscribe((update) => {\n        if (update.type === 'mutation' && update.transition === 'disappear') {\n          if (cache.delete(update.documentId)) {\n            setDocumentsCacheLastUpdated(Date.now())\n          }\n        }\n\n        if (update.type !== 'mutation' || !update.effects?.apply?.length) return\n        // Schedule a reach state update with the ID of the document that were mutated\n        // This react handler will apply the document to related source map snapshots\n        const cachedDocument = cache.peek(update.documentId)\n        if (cachedDocument as SanityDocument) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const patchDoc = {...cachedDocument} as any\n          delete patchDoc._rev\n          const patchedDocument = applyPatch(patchDoc, update.effects.apply)\n          cache.set(update.documentId, patchedDocument)\n          setDocumentsCacheLastUpdated(Date.now())\n        }\n      })\n    return () => subscription.unsubscribe()\n  }, [cache, client, setDocumentsCacheLastUpdated])\n\n  return (\n    <>\n      {batch.map((ids) => (\n        <GetDocuments\n          key={JSON.stringify(ids)}\n          cache={cache}\n          client={client}\n          ids={ids}\n          setDocumentsCacheLastUpdated={setDocumentsCacheLastUpdated}\n        />\n      ))}\n    </>\n  )\n})\n\ninterface GetDocumentsProps extends Pick<SharedProps, 'client' | 'cache'> {\n  ids: string[]\n  setDocumentsCacheLastUpdated: (timestamp: number) => void\n}\nconst GetDocuments = memo(function GetDocuments(props: GetDocumentsProps) {\n  const {client, cache, ids, setDocumentsCacheLastUpdated} = props\n\n  useEffect(() => {\n    const missingIds = ids.filter((id) => !cache.has(id))\n    if (missingIds.length === 0) return\n    client.getDocuments(missingIds).then((documents) => {\n      for (const doc of documents) {\n        if (doc && doc?._id) {\n          cache.set(doc._id, doc)\n          setDocumentsCacheLastUpdated(Date.now())\n        }\n      }\n      // eslint-disable-next-line no-console\n    }, console.error)\n  }, [cache, client, ids, setDocumentsCacheLastUpdated])\n\n  return null\n})\nGetDocuments.displayName = 'GetDocuments'\n\ninterface QuerySubscriptionProps\n  extends Pick<\n    UseQuerySubscriptionProps,\n    'client' | 'cache' | 'refreshInterval' | 'liveDocument' | 'documentsCacheLastUpdated'\n  > {\n  projectId: string\n  dataset: string\n  perspective: ClientPerspective\n  query: string\n  params: QueryParams\n  comlink: LoaderConnection | undefined\n}\nfunction QuerySubscription(props: QuerySubscriptionProps) {\n  const {\n    cache,\n    projectId,\n    dataset,\n    perspective,\n    query,\n    client,\n    refreshInterval,\n    liveDocument,\n    comlink,\n    documentsCacheLastUpdated,\n  } = props\n\n  const params = useQueryParams(props.params)\n  const data = useQuerySubscription({\n    cache,\n    client,\n    liveDocument,\n    params,\n    perspective,\n    query,\n    refreshInterval,\n    documentsCacheLastUpdated,\n  })\n  const result = data?.result\n  const resultSourceMap = data?.resultSourceMap\n  const tags = data?.tags\n\n  useEffect(() => {\n    if (resultSourceMap) {\n      comlink?.post('loader/query-change', {\n        projectId,\n        dataset,\n        perspective,\n        query,\n        params,\n        result,\n        resultSourceMap,\n        tags,\n      })\n    }\n  }, [comlink, dataset, params, perspective, projectId, query, result, resultSourceMap, tags])\n\n  return null\n}\n\ninterface UseQuerySubscriptionProps\n  extends Required<Pick<SharedProps, 'client' | 'refreshInterval' | 'cache'>> {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  query: string\n  params: QueryParams\n  perspective: ClientPerspective\n  documentsCacheLastUpdated: number\n}\nfunction useQuerySubscription(props: UseQuerySubscriptionProps) {\n  const {\n    cache,\n    liveDocument,\n    client,\n    refreshInterval,\n    query,\n    params,\n    perspective,\n    documentsCacheLastUpdated,\n  } = props\n  const [snapshot, setSnapshot] = useState<{\n    result: unknown\n    resultSourceMap?: ContentSourceMap\n    tags?: SyncTag[]\n  } | null>(null)\n  const {projectId, dataset} = useMemo(() => {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const {projectId, dataset} = client.config()\n    return {projectId, dataset} as Required<Pick<ClientConfig, 'projectId' | 'dataset'>>\n  }, [client])\n\n  // Make sure any async errors bubble up to the nearest error boundary\n  const [error, setError] = useState<unknown>(null)\n  if (error) throw error\n\n  const [revalidate, startRefresh] = useRevalidate({refreshInterval})\n  const shouldRefetch = revalidate === 'refresh' || revalidate === 'inflight'\n  useEffect(() => {\n    if (!shouldRefetch) {\n      return undefined\n    }\n\n    let fulfilled = false\n    let fetching = false\n    const controller = new AbortController()\n    // eslint-disable-next-line no-inner-declarations\n    async function effect() {\n      const {signal} = controller\n      fetching = true\n      const {result, resultSourceMap, syncTags} = await client.fetch(query, params, {\n        tag: 'presentation-loader',\n        signal,\n        perspective,\n        filterResponse: false,\n      })\n      fetching = false\n\n      if (!signal.aborted) {\n        setSnapshot({result, resultSourceMap, tags: syncTags})\n\n        fulfilled = true\n      }\n    }\n    const onFinally = startRefresh()\n    effect()\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      .catch((error) => {\n        fetching = false\n        if (error.name !== 'AbortError') {\n          setError(error)\n        }\n      })\n      .finally(onFinally)\n    return () => {\n      if (!fulfilled && !fetching) {\n        controller.abort()\n      }\n    }\n  }, [\n    client,\n    dataset,\n    liveDocument,\n    params,\n    perspective,\n    projectId,\n    query,\n    shouldRefetch,\n    startRefresh,\n  ])\n\n  return useMemo(() => {\n    if (documentsCacheLastUpdated && snapshot?.resultSourceMap) {\n      return {\n        result: turboChargeResultIfSourceMap(\n          cache,\n          liveDocument,\n          snapshot.result,\n          perspective,\n          snapshot.resultSourceMap,\n        ),\n        resultSourceMap: snapshot.resultSourceMap,\n      }\n    }\n    return snapshot\n  }, [cache, documentsCacheLastUpdated, liveDocument, perspective, snapshot])\n}\n\nlet warnedAboutCrossDatasetReference = false\nexport function turboChargeResultIfSourceMap<T = unknown>(\n  cache: SharedProps['cache'],\n  liveDocument: Partial<SanityDocument> | null | undefined,\n  result: T,\n  perspective: ClientPerspective,\n  resultSourceMap?: ContentSourceMap,\n): T {\n  if (perspective === 'raw') {\n    throw new Error('turboChargeResultIfSourceMap does not support raw perspective')\n  }\n  return applySourceDocuments(\n    result,\n    resultSourceMap,\n    (sourceDocument) => {\n      if (sourceDocument._projectId) {\n        // @TODO Handle cross dataset references\n        if (!warnedAboutCrossDatasetReference) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            'Cross dataset references are not supported yet, ignoring source document',\n            sourceDocument,\n          )\n          warnedAboutCrossDatasetReference = true\n        }\n        return undefined\n      }\n      // If there's a displayed document, always prefer it\n      if (\n        liveDocument?._id &&\n        getPublishedId(liveDocument._id) === getPublishedId(sourceDocument._id)\n      ) {\n        if (typeof liveDocument._id === 'string' && typeof sourceDocument._type === 'string') {\n          return liveDocument as unknown as Required<Pick<SanityDocument, '_id' | '_type'>>\n        }\n        return {\n          ...liveDocument,\n          _id: liveDocument._id || sourceDocument._id,\n          _type: liveDocument._type || sourceDocument._type,\n        }\n      }\n      // Fallback to general documents cache\n      return cache.get(sourceDocument._id)\n    },\n    mapChangedValue,\n    perspective,\n  )\n}\n\nfunction getQueryCacheKey(query: string, params: QueryParams | string): `${string}-${string}` {\n  return `${query}-${typeof params === 'string' ? params : JSON.stringify(params)}`\n}\n"],"names":["LoaderQueries","props","liveDocument","controller","perspective","activePerspective","documentsOnPage","onLoadersConnection","onDocumentsOnPage","comlink","setComlink","useState","liveQueries","setLiveQueries","projectId","useProjectId","dataset","useDataset","useEffect","interval","setInterval","Object","keys","length","now","Date","values","some","liveQuery","heartbeat","receivedAt","next","key","value","entries","MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL","clearInterval","createChannel","name","connectTo","createConnectionMachine","provide","actors","createCompatibilityActors","onStatus","on","data","documents","Error","prev","getQueryCacheKey","query","params","start","cache","LRUCache","LIVE_QUERY_CACHE_SIZE","studioClient","useClient","apiVersion","clientConfig","useMemo","config","client","withConfig","resultSourceMap","post","turboIds","documentsActuallyInUse","map","_id","ids","Set","max","capacity","documentsCacheLastUpdated","setDocumentsCacheLastUpdated","Turbo","memo","batch","setBatch","batchSet","flat","nextBatch","turboId","has","add","nextBatchSlice","slice","LIVE_QUERY_CACHE_BATCH_SIZE","raf","requestAnimationFrame","prevBatch","cancelAnimationFrame","subscription","listen","events","effectFormat","includePreviousRevision","includeResult","tag","subscribe","update","type","transition","delete","documentId","effects","apply","cachedDocument","peek","patchDoc","_rev","patchedDocument","applyPatch","set","unsubscribe","JSON","stringify","GetDocuments","missingIds","filter","id","getDocuments","then","doc","console","error","displayName","QuerySubscription","$","_c","refreshInterval","useQueryParams","t0","useQuerySubscription","result","tags","t1","t2","snapshot","setSnapshot","setError","revalidate","startRefresh","useRevalidate","shouldRefetch","fulfilled","fetching","AbortController","effect","signal","syncTags","fetch","filterResponse","aborted","onFinally","catch","finally","abort","turboChargeResultIfSourceMap","warnedAboutCrossDatasetReference","applySourceDocuments","sourceDocument","_projectId","warn","getPublishedId","_type","get","mapChangedValue"],"mappings":"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"}