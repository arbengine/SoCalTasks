"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var selector_isAtTheStartOfBlock = require("../_chunks-cjs/selector.is-at-the-start-of-block.cjs"), util_sliceBlocks = require("../_chunks-cjs/util.slice-blocks.cjs"), selector_getTextBefore = require("../_chunks-cjs/selector.get-text-before.cjs"), types = require("@sanity/types"), util_reverseSelection = require("../_chunks-cjs/util.reverse-selection.cjs");
const getSelectedSlice = ({
  context
}) => util_sliceBlocks.sliceBlocks({
  blocks: context.value,
  selection: context.selection
});
function isPointAfterSelection(point) {
  return (snapshot) => {
    if (!snapshot.context.selection)
      return !1;
    const selection = util_reverseSelection.reverseSelection(snapshot.context.selection), pointBlockKey = types.isKeySegment(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = types.isKeySegment(point.path[2]) ? point.path[2]._key : void 0, endBlockKey = types.isKeySegment(selection.focus.path[0]) ? selection.focus.path[0]._key : void 0, endChildKey = types.isKeySegment(selection.focus.path[2]) ? selection.focus.path[2]._key : void 0;
    if (!pointBlockKey || !endBlockKey)
      return !1;
    let after = !1;
    for (const block of snapshot.context.value) {
      if (block._key === endBlockKey) {
        if (block._key !== pointBlockKey) {
          after = !0;
          break;
        }
        if (!types.isPortableTextTextBlock(block) || !pointChildKey || !endChildKey)
          break;
        for (const child of block.children) {
          if (child._key === endChildKey) {
            if (child._key !== pointChildKey) {
              after = !0;
              break;
            }
            after = point.offset > selection.focus.offset;
            break;
          }
          if (child._key === pointChildKey)
            break;
        }
      }
      if (block._key === pointBlockKey)
        break;
    }
    return after;
  };
}
function isPointBeforeSelection(point) {
  return (snapshot) => {
    if (!snapshot.context.selection)
      return !1;
    const selection = util_reverseSelection.reverseSelection(snapshot.context.selection), pointBlockKey = types.isKeySegment(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = types.isKeySegment(point.path[2]) ? point.path[2]._key : void 0, startBlockKey = types.isKeySegment(selection.anchor.path[0]) ? selection.anchor.path[0]._key : void 0, startChildKey = types.isKeySegment(selection.anchor.path[2]) ? selection.anchor.path[2]._key : void 0;
    if (!pointBlockKey || !startBlockKey)
      return !1;
    let before = !1;
    for (const block of snapshot.context.value) {
      if (block._key === pointBlockKey) {
        if (block._key !== startBlockKey) {
          before = !0;
          break;
        }
        if (!types.isPortableTextTextBlock(block) || !pointChildKey || !startChildKey)
          break;
        for (const child of block.children) {
          if (child._key === pointChildKey) {
            if (child._key !== startChildKey) {
              before = !0;
              break;
            }
            before = point.offset < selection.anchor.offset;
            break;
          }
          if (child._key === startChildKey)
            break;
        }
      }
      if (block._key === startBlockKey)
        break;
    }
    return before;
  };
}
exports.getActiveListItem = selector_isAtTheStartOfBlock.getActiveListItem;
exports.getActiveStyle = selector_isAtTheStartOfBlock.getActiveStyle;
exports.getFirstBlock = selector_isAtTheStartOfBlock.getFirstBlock;
exports.getFocusBlock = selector_isAtTheStartOfBlock.getFocusBlock;
exports.getFocusBlockObject = selector_isAtTheStartOfBlock.getFocusBlockObject;
exports.getFocusChild = selector_isAtTheStartOfBlock.getFocusChild;
exports.getFocusListBlock = selector_isAtTheStartOfBlock.getFocusListBlock;
exports.getFocusSpan = selector_isAtTheStartOfBlock.getFocusSpan;
exports.getFocusTextBlock = selector_isAtTheStartOfBlock.getFocusTextBlock;
exports.getLastBlock = selector_isAtTheStartOfBlock.getLastBlock;
exports.getNextBlock = selector_isAtTheStartOfBlock.getNextBlock;
exports.getPreviousBlock = selector_isAtTheStartOfBlock.getPreviousBlock;
exports.getSelectedBlocks = selector_isAtTheStartOfBlock.getSelectedBlocks;
exports.getSelectedSpans = selector_isAtTheStartOfBlock.getSelectedSpans;
exports.getSelectionEndBlock = selector_isAtTheStartOfBlock.getSelectionEndBlock;
exports.getSelectionStartBlock = selector_isAtTheStartOfBlock.getSelectionStartBlock;
exports.isActiveAnnotation = selector_isAtTheStartOfBlock.isActiveAnnotation;
exports.isActiveDecorator = selector_isAtTheStartOfBlock.isActiveDecorator;
exports.isActiveListItem = selector_isAtTheStartOfBlock.isActiveListItem;
exports.isActiveStyle = selector_isAtTheStartOfBlock.isActiveStyle;
exports.isAtTheEndOfBlock = selector_isAtTheStartOfBlock.isAtTheEndOfBlock;
exports.isAtTheStartOfBlock = selector_isAtTheStartOfBlock.isAtTheStartOfBlock;
exports.isSelectionCollapsed = selector_isAtTheStartOfBlock.isSelectionCollapsed;
exports.isSelectionExpanded = selector_isAtTheStartOfBlock.isSelectionExpanded;
exports.getBlockTextBefore = selector_getTextBefore.getBlockTextBefore;
exports.getSelectionText = selector_getTextBefore.getSelectionText;
exports.getSelectedSlice = getSelectedSlice;
exports.isPointAfterSelection = isPointAfterSelection;
exports.isPointBeforeSelection = isPointBeforeSelection;
//# sourceMappingURL=index.cjs.map
