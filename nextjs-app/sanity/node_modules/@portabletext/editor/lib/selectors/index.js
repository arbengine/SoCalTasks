import { getActiveListItem, getActiveStyle, getFirstBlock, getFocusBlock, getFocusBlockObject, getFocusChild, getFocusListBlock, getFocusSpan, getFocusTextBlock, getLastBlock, getNextBlock, getPreviousBlock, getSelectedBlocks, getSelectedSpans, getSelectionEndBlock, getSelectionStartBlock, isActiveAnnotation, isActiveDecorator, isActiveListItem, isActiveStyle, isAtTheEndOfBlock, isAtTheStartOfBlock, isSelectionCollapsed, isSelectionExpanded } from "../_chunks-es/selector.is-at-the-start-of-block.js";
import { sliceBlocks } from "../_chunks-es/util.slice-blocks.js";
import { getBlockTextBefore, getSelectionText } from "../_chunks-es/selector.get-text-before.js";
import { isKeySegment, isPortableTextTextBlock } from "@sanity/types";
import { reverseSelection } from "../_chunks-es/util.reverse-selection.js";
const getSelectedSlice = ({
  context
}) => sliceBlocks({
  blocks: context.value,
  selection: context.selection
});
function isPointAfterSelection(point) {
  return (snapshot) => {
    if (!snapshot.context.selection)
      return !1;
    const selection = reverseSelection(snapshot.context.selection), pointBlockKey = isKeySegment(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = isKeySegment(point.path[2]) ? point.path[2]._key : void 0, endBlockKey = isKeySegment(selection.focus.path[0]) ? selection.focus.path[0]._key : void 0, endChildKey = isKeySegment(selection.focus.path[2]) ? selection.focus.path[2]._key : void 0;
    if (!pointBlockKey || !endBlockKey)
      return !1;
    let after = !1;
    for (const block of snapshot.context.value) {
      if (block._key === endBlockKey) {
        if (block._key !== pointBlockKey) {
          after = !0;
          break;
        }
        if (!isPortableTextTextBlock(block) || !pointChildKey || !endChildKey)
          break;
        for (const child of block.children) {
          if (child._key === endChildKey) {
            if (child._key !== pointChildKey) {
              after = !0;
              break;
            }
            after = point.offset > selection.focus.offset;
            break;
          }
          if (child._key === pointChildKey)
            break;
        }
      }
      if (block._key === pointBlockKey)
        break;
    }
    return after;
  };
}
function isPointBeforeSelection(point) {
  return (snapshot) => {
    if (!snapshot.context.selection)
      return !1;
    const selection = reverseSelection(snapshot.context.selection), pointBlockKey = isKeySegment(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = isKeySegment(point.path[2]) ? point.path[2]._key : void 0, startBlockKey = isKeySegment(selection.anchor.path[0]) ? selection.anchor.path[0]._key : void 0, startChildKey = isKeySegment(selection.anchor.path[2]) ? selection.anchor.path[2]._key : void 0;
    if (!pointBlockKey || !startBlockKey)
      return !1;
    let before = !1;
    for (const block of snapshot.context.value) {
      if (block._key === pointBlockKey) {
        if (block._key !== startBlockKey) {
          before = !0;
          break;
        }
        if (!isPortableTextTextBlock(block) || !pointChildKey || !startChildKey)
          break;
        for (const child of block.children) {
          if (child._key === pointChildKey) {
            if (child._key !== startChildKey) {
              before = !0;
              break;
            }
            before = point.offset < selection.anchor.offset;
            break;
          }
          if (child._key === startChildKey)
            break;
        }
      }
      if (block._key === startBlockKey)
        break;
    }
    return before;
  };
}
export {
  getActiveListItem,
  getActiveStyle,
  getBlockTextBefore,
  getFirstBlock,
  getFocusBlock,
  getFocusBlockObject,
  getFocusChild,
  getFocusListBlock,
  getFocusSpan,
  getFocusTextBlock,
  getLastBlock,
  getNextBlock,
  getPreviousBlock,
  getSelectedBlocks,
  getSelectedSlice,
  getSelectedSpans,
  getSelectionEndBlock,
  getSelectionStartBlock,
  getSelectionText,
  isActiveAnnotation,
  isActiveDecorator,
  isActiveListItem,
  isActiveStyle,
  isAtTheEndOfBlock,
  isAtTheStartOfBlock,
  isPointAfterSelection,
  isPointBeforeSelection,
  isSelectionCollapsed,
  isSelectionExpanded
};
//# sourceMappingURL=index.js.map
