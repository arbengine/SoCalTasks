import {KeyedSegment, PortableTextBlock} from '@sanity/types'
import type {Path, PathSegment, PortableTextTextBlock} from '@sanity/types'

/**
 * @beta
 */
export declare type BlockOffset = {
  path: [KeyedSegment]
  offset: number
}

/**
 * @public
 */
export declare function blockOffsetToSpanSelectionPoint({
  value,
  blockOffset,
}: {
  value: Array<PortableTextBlock>
  blockOffset: BlockOffset
}):
  | {
      path: [KeyedSegment, 'children', KeyedSegment]
      offset: number
    }
  | undefined

/** @public */
export declare type EditorSelection = {
  anchor: EditorSelectionPoint
  focus: EditorSelectionPoint
  backward?: boolean
} | null

/** @public */
export declare type EditorSelectionPoint = {
  path: Path
  offset: number
}

/**
 * @public
 */
export declare function getBlockEndPoint({
  node,
  path,
}: {
  node: PortableTextBlock
  path: [KeyedSegment]
}): EditorSelectionPoint

/**
 * @public
 */
export declare function getBlockStartPoint({
  node,
  path,
}: {
  node: PortableTextBlock
  path: [KeyedSegment]
}): EditorSelectionPoint

/**
 * @public
 */
export declare function getTextBlockText(block: PortableTextTextBlock): string

/**
 * @public
 */
export declare function isEmptyTextBlock(block: PortableTextBlock): boolean

/**
 * @public
 */
export declare function isEqualSelectionPoints(
  a: EditorSelectionPoint,
  b: EditorSelectionPoint,
): boolean

/**
 * @public
 */
export declare function isKeyedSegment(
  segment: PathSegment,
): segment is KeyedSegment

/**
 * @public
 */
export declare function reverseSelection(
  selection: NonNullable<EditorSelection>,
): NonNullable<EditorSelection>

/**
 * @public
 */
export declare function sliceBlocks({
  blocks,
  selection,
}: {
  blocks: Array<PortableTextBlock>
  selection: EditorSelection
}): Array<PortableTextBlock>

/**
 * @public
 */
export declare function spanSelectionPointToBlockOffset({
  value,
  selectionPoint,
}: {
  value: Array<PortableTextBlock>
  selectionPoint: EditorSelectionPoint
}): BlockOffset | undefined

export {}
