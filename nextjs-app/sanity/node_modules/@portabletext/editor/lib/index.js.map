{"version":3,"file":"index.js","sources":["../src/internal-utils/selection.ts","../src/editor/nodes/DefaultObject.tsx","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/nodes/DefaultAnnotation.tsx","../src/editor/components/Leaf.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/withSyncRangeDecorations.ts","../src/editor/Editable.tsx"],"sourcesContent":["import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport type {JSX} from 'react'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../internal-utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef = useRef<HTMLElement>(undefined)\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useMemo,\n  useRef,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      }\n    }\n\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n\n  className = 'pt-block pt-object-block'\n\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n\n  let renderedBlockFromProps: JSX.Element | undefined\n\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        <div ref={blockRef} contentEditable={false}>\n          {renderedBlockFromProps ? (\n            renderedBlockFromProps\n          ) : (\n            <ObjectNode value={value} />\n          )}\n        </div>\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations,\n}: {\n  editorActor: EditorActor\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor\n  syncRangeDecorations: (operation?: Operation) => void\n}) {\n  const originalApply = slateEditor.apply\n\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n\n    if (\n      !editorActor.getSnapshot().matches({'edit mode': 'read only'}) &&\n      op.type !== 'set_selection'\n    ) {\n      syncRangeDecorations(op)\n    }\n  }\n\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../internal-utils/values'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EventProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'notify.selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      syncRangeDecorations()\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations,\n    })\n    return () => teardown()\n  }, [editorActor, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'copy',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'notify.loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'notify.done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'paste',\n            data: event.nativeEvent.clipboardData,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'notify.focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'notify.selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      const focusBlockPath = slateEditor.selection\n        ? slateEditor.selection.focus.path.slice(0, 1)\n        : undefined\n      const focusBlock = focusBlockPath\n        ? (Node.descendant(slateEditor, focusBlockPath) as\n            | SlateTextBlock\n            | VoidElement)\n        : undefined\n      const [_, lastNodePath] = Node.last(slateEditor, [])\n      const lastBlockPath = lastNodePath.slice(0, 1)\n      const lastNodeFocused = focusBlockPath\n        ? Path.equals(lastBlockPath, focusBlockPath)\n        : false\n      const lastBlockIsVoid = focusBlock\n        ? !slateEditor.isTextBlock(focusBlock)\n        : false\n      const collapsedSelection =\n        slateEditor.selection && SlateRange.isCollapsed(slateEditor.selection)\n\n      if (collapsedSelection && lastNodeFocused && lastBlockIsVoid) {\n        Transforms.insertNodes(\n          slateEditor,\n          slateEditor.pteCreateTextBlock({decorators: []}),\n        )\n        slateEditor.onChange()\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'notify.blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.down',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'key.up',\n            keyboardEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n"],"names":["normalizePoint","point","value","newPath","newOffset","offset","blockKey","path","_key","childKey","block","find","blk","push","children","Array","isArray","length","child","cld","text","normalizeSelection","selection","newAnchor","newFocus","anchor","focus","isEqual","backward","DefaultObject","props","$","_c","t0","Symbol","for","userSelect","t1","_type","displayName","debug","debugWithName","DraggableBlock","element","readOnly","blockRef","editor","useSlateStatic","dragGhostRef","useRef","undefined","isDragOver","setIsDragOver","useState","t2","Editor","isVoid","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","event","isMyDragOver","IS_DRAGGING_BLOCK_ELEMENT","get","preventDefault","dataTransfer","dropEffect","IS_DRAGGING_ELEMENT_TARGET","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","IS_DRAGGING_BLOCK_TARGET_POSITION","handleDragOver","t8","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","JSON","stringify","originalPath_0","equals","Transforms","moveNodes","at","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","style","opacity","handleDrag","t12","event_3","IS_DRAGGING","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","t18","t19","EMPTY_ANNOTATIONS","inlineBlockStyle","display","Element","attributes","schemaTypes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","selected","useSelected","inlineBlockObjectRef","focused","Range","isCollapsed","useMemo","fromSlateValue","name","KEY_TO_VALUE_ELEMENT","renderedBlock","className","blockPath","Error","node","depth","schemaType","inlineObjects","SlateElement","isElement","elmPath","debugRenders","annotations","ObjectNode","editorElementRef","type","isListItem","blockStyleType","styles","item","level","listItem","isListBlock","listType","lists","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","blockObjects","renderedBlockFromProps","_props","DefaultAnnotation","annotation","alert","handleClick","color","EMPTY_MARKS","Leaf","editorActor","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","usePortableTextEditor","blockSelected","setFocused","setSelected","parent","decoratorValues","decorators","map","dec","marks","uniq","filter","mark","includes","annotationMarks","markDefs","def","Boolean","shouldTrackSelectionAndFocus","sel","PortableTextEditor","getSelection","isCollapsedSelection","startTransition","setSelectedFromRange","useCallback","winSelection","window","rangeCount","range","getRangeAt","intersectsNode","onBlur","on","onFocus","onSelection","unsubscribe","content","returnedChildren","Text","isText","span","forEach","t","_child","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","keys","cat","hotkey","isHotkey","nativeEvent","possibleMark","send","behaviorEvent","decorator","possibleCommand","command","withSyncRangeDecorations","slateEditor","syncRangeDecorations","originalApply","apply","op","getSnapshot","matches","PLACEHOLDER_STYLE","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useContext","EditorActorContext","useSelector","s","context","schema","useSlate","blockTypeName","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","toSlateRange","select","operations","some","o","operation","newSlateRanges","rangeDecorationItem","SlateRange","isRange","onMoved","newSelection","origin","newRange","moveRangeByOperation","getValue","newRangeSelection","toPortableTextRange","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","data","handlePaste","onPasteResult","Promise","resolve","then","result","insert","insertData","insertFragment","toSlateValue","console","catch","error","finally","handleOnFocus","isDefaultPrevented","start","focusBlockPath","slice","focusBlock","Node","descendant","_","lastNodePath","last","lastBlockPath","lastNodeFocused","lastBlockIsVoid","isTextBlock","insertNodes","pteCreateTextBlock","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","deselect","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","keyboardEvent","key","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","_editor","domRange","decorate","isEqualToEmptyEditor","intersection","SlateEditable"],"mappings":";;;;;;;;;;;;AAIgBA,SAAAA,eACdC,OACAC,OAC6B;AACzB,MAAA,CAACD,SAAS,CAACC;AACN,WAAA;AAET,QAAMC,UAAgB,CAAE;AACpBC,MAAAA,YAAoBH,MAAMI,UAAU;AACxC,QAAMC,WACJ,OAAOL,MAAMM,KAAK,CAAC,KAAM,YACzB,UAAUN,MAAMM,KAAK,CAAC,KACtBN,MAAMM,KAAK,CAAC,EAAEC,MACVC,WACJ,OAAOR,MAAMM,KAAK,CAAC,KAAM,YACzB,UAAUN,MAAMM,KAAK,CAAC,KACtBN,MAAMM,KAAK,CAAC,EAAEC,MACVE,QAAuCR,MAAMS,KAChDC,CAAQA,QAAAA,IAAIJ,SAASF,QACxB;AACII,MAAAA;AACFP,YAAQU,KAAK;AAAA,MAACL,MAAME,MAAMF;AAAAA,IAAAA,CAAK;AAAA;AAExB,WAAA;AAET,MAAIE,SAAST,MAAMM,KAAK,CAAC,MAAM,YAAY;AAEvC,QAAA,CAACG,MAAMI,YACNC,MAAMC,QAAQN,MAAMI,QAAQ,KAAKJ,MAAMI,SAASG,WAAW;AAErD,aAAA;AAET,UAAMC,QACJH,MAAMC,QAAQN,MAAMI,QAAQ,KAC5BJ,MAAMI,SAASH,KAAMQ,CAAAA,QAAQA,IAAIX,SAASC,QAAQ;AAChDS,QAAAA;AACFf,cAAQU,KAAK,UAAU,GACvBV,QAAQU,KAAK;AAAA,QAACL,MAAMU,MAAMV;AAAAA,MAAAA,CAAK,GAC/BJ,YACEc,MAAME,QAAQF,MAAME,KAAKH,UAAUhB,MAAMI,SACrCJ,MAAMI,SACLa,MAAME,QAAQF,MAAME,KAAKH,UAAW;AAAA;AAEpC,aAAA;AAAA,EAAA;AAGJ,SAAA;AAAA,IAACV,MAAMJ;AAAAA,IAASE,QAAQD;AAAAA,EAAS;AAC1C;AAEgBiB,SAAAA,mBACdC,WACApB,OACwB;AACxB,MAAI,CAACoB,aAAa,CAACpB,SAASA,MAAMe,WAAW;AACpC,WAAA;AAELM,MAAAA,YAAyC,MACzCC,WAAwC;AACtC,QAAA;AAAA,IAACC;AAAAA,IAAQC;AAAAA,EAAAA,IAASJ;AAUxB,SAREG,UACAvB,MAAMS,KAAMC,CAAAA,QAAQe,QAAQ;AAAA,IAACnB,MAAMI,IAAIJ;AAAAA,EAAAA,GAAOiB,OAAOlB,KAAK,CAAC,CAAC,CAAC,MAE7DgB,YAAYvB,eAAeyB,QAAQvB,KAAK,IAEtCwB,SAASxB,MAAMS,KAAMC,SAAQe,QAAQ;AAAA,IAACnB,MAAMI,IAAIJ;AAAAA,EAAOkB,GAAAA,MAAMnB,KAAK,CAAC,CAAC,CAAC,MACvEiB,WAAWxB,eAAe0B,OAAOxB,KAAK,IAEpCqB,aAAaC,WACR;AAAA,IAACC,QAAQF;AAAAA,IAAWG,OAAOF;AAAAA,IAAUI,UAAUN,UAAUM;AAAAA,EAAAA,IAE3D;AACT;ACrEA,MAAMC,gBAAgBC,CAAA,UAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA;AAAAC,MAAAA;AAAAF,IAAA,CAAA,MAAAG,OAAAC,IAAA,2BAAA,KAENF,KAAA;AAAA,IAAAG,YAAa;AAAA,EAAA,GAAOL,OAAAE,MAAAA,KAAAF,EAAA,CAAA;AAAAM,MAAAA;AAAA,SAAAN,EAAA,CAAA,MAAAD,MAAA5B,MAAAM,QAAAuB,EAAAD,CAAAA,MAAAA,MAAA5B,MAAAoC,SAAhCD,KAAA,qBAAA,OAAA,EAAY,OAAAJ,IAAsB,UAAA;AAAA,IAAA;AAAA,IAC9BH,MAAK5B,MAAAoC;AAAAA,IAAa;AAAA,IAAGR,MAAK5B,MAAAM;AAAAA,IAAY;AAAA,EAAA,GAC1C,GAAMuB,EAAAD,CAAAA,IAAAA,MAAA5B,MAAAM,MAAAuB,EAAAD,CAAAA,IAAAA,MAAA5B,MAAAoC,OAAAP,OAAAM,MAAAA,KAAAN,EAAA,CAAA,GAFNM;AAEM;AAIVR,cAAcU,cAAc;ACK5B,MAAMC,UAAQC,cAAc,2BAA2B,GAiB1CC,iBAAiBT,CAAA,OAAA;AAAAF,QAAAA,IAAAC,EAAA,EAAA,GAAC;AAAA,IAAAlB;AAAAA,IAAA6B;AAAAA,IAAAC;AAAAA,IAAAC;AAAAA,EAAAZ,IAAAA,IAM7Ba,SAAeC,kBACfC,eAAqBC,OAAAC,MAA6B,GAClD,CAAAC,YAAAC,aAAA,IAAoCC,WAAc;AAAC,MAAAhB,IAAAiB;AAAAvB,IAAAe,CAAAA,MAAAA,UAAAf,SAAAY,WAE3CW,KAAAC,OAAAC,OAAcV,QAAQH,OAAO,GAACZ,OAAAe,QAAAf,OAAAY,SAAAZ,OAAAuB,MAAAA,KAAAvB,EAAA,CAAA,GAAAM,KAA9BiB;AADR,QAAAE,SAAenB;AAGd,MAAAoB,IAAAC;AAAA3B,IAAAe,CAAAA,MAAAA,UAAAf,SAAAY,WAEOe,KAAAH,OAAAI,SAAgBb,QAAQH,OAAO,GAACZ,OAAAe,QAAAf,OAAAY,SAAAZ,OAAA2B,MAAAA,KAAA3B,EAAA,CAAA,GAAA0B,KAAhCC;AADR,QAAAC,WAAiBF,IAKjB,CAAAG,cAAAC,eAAA,IAAwCR,aAAiC;AAAC,MAAAS,IAAAC;AAAAhC,IAAAc,CAAAA,MAAAA,YAAAd,SAAAe,UAAAf,EAAA,CAAA,MAAAY,WAGxEmB,KAAAA,MACED,gBACEhB,WAAWA,SAAQmB,UAAWC,YAAAC,UAAsBpB,QAAQH,OAAO,CACrE,GACFoB,KAACjB,CAAAA,QAAQH,SAASE,QAAQ,GAACd,OAAAc,UAAAd,OAAAe,QAAAf,OAAAY,SAAAZ,OAAA+B,IAAA/B,QAAAgC,OAAAD,KAAA/B,EAAA,CAAA,GAAAgC,KAAAhC,EAAA,EAAA,IAL7BoC,UACEL,IAIAC,EACF;AAACK,MAAAA;AAAArC,IAAA6B,EAAAA,MAAAA,gBAAA7B,UAAAe,UAAAf,EAAA,EAAA,MAAAY,WAICyB,KAAAC,CAAA,UAAA;AACEC,UAAAA,eAAqBC,0BAAAC,IAA8B1B,MAAM;AAErD,QAAA,CAACwB,gBAAY,CAAKV;AAAY;AAG7Ba,UAAAA,eAAAA,GACLJ,MAAKK,aAAAC,aAA2B,QAChCC,2BAAAC,IAA+B/B,QAAQH,OAAO;AAC9C,UAAAmC,cAAoBlB,aAAYmB,sBAAAA,GAChC1E,SAAeyE,YAAWE,KAC1BC,SAAeH,YAAWG,QAC1BC,IAAUb,MAAKc,OACfC,MAAYC,KAAAC,IAASjF,SAAS6E,CAAC;AAS0B,QAPrDvC,YAAYG,OAAMhC,SAAY,CAAA,MAEvBsE,MAAMH,SAAU,IAEzBM,kCAAAV,IAAsC/B,QAD3B,KAC2C,IAGtDyC,kCAAAV,IAAsC/B,QAD3B,QAC2C,IAEpDwB,iBAAiB3B,SAAO;AAC1B0B,YAAKK,aAAAC,aAA2B;AAAM;AAAA,IAAA;AAGxCvB,oBAAkB;AAAA,EAAA,GACnBrB,QAAA6B,cAAA7B,QAAAe,QAAAf,QAAAY,SAAAZ,QAAAqC,MAAAA,KAAArC,EAAA,EAAA;AA9BH,QAAAyD,iBAAuBpB;AAgCtBqB,MAAAA;AAAA1D,IAAA,EAAA,MAAAG,OAAAC,IAAA,2BAAA,KAGmCsD,KAAAA,MAAA;AAClCrC,oBAAmB;AAAA,EAAA,GACpBrB,QAAA0D,MAAAA,KAAA1D,EAAA,EAAA;AAFD,QAAA2D,kBAAwBD;AAElBE,MAAAA;AAAA5D,IAAAe,EAAAA,MAAAA,UAAAf,UAAAY,WAIJgD,KAAAC,CAAA,YAAA;AACEC,UAAAA,cAAoBjB,2BAAAJ,IAA+B1B,MAAM;AAAC,QACtD+C,aAAW;AACbhB,kBAAAA,IAAgB/B,UAAa,GAC7BuB,QAAKI,eAAgB,GACrBJ,QAAKyB,gBACLlB,GAAAA,2BAAAmB,OAAkCjD,MAAM,GACpCE,aAAYgB,YACdxB,QAAM,qBAAqB,GAC3BwD,SAAAC,KAAAC,YAA0BlD,aAAYgB,OAAQ;AAEhDmC,YAAAA,eAAqBZ,kCAAAf,IAAsC1B,MAAM;AACjEyC,wCAAAQ,OAAyCjD,MAAM;AAC/C,UAAAsD,aAAiBnC,YAAAoC,SAAqBvD,QAAQ+C,WAAW;AACzDS,YAAAA,SAAerC,YAAAoC,SAAqBvD,QAAQH,OAAO,GACnD4D,WAAiBC,KAAAD,SAAcD,QAAQF,UAAU;AAC7CD,UAAAA,iBAAiB,YAAQ,CAAKI,UAAQ;AAAA,YAEpCH,WAAiBtD,CAAAA,KAAAA,OAAMhC,SAAAG,SAAoB,GAAA;AAC7CuB,kBAAM,6CAA6C;AAAC;AAAA,QAAA;AAGtD,cAAAiE,eAAqBL;AACrBA,qBAAaA,KAAAA,KAAUA,UAAU,GACjC5D,QACE,6BAA6BkE,KAAAC,UAAeF,YAAY,CAAC,OAAOC,KAAAC,UAC9DP,UACF,CAAC,EACH;AAAA,MAAA;AAGAD,UAAAA,iBAAiB,SACjBI,YACAH,WAAU,CAAA,MAAQtD,OAAMhC,SAAAG,SAAoB,GAAA;AAE5C,cAAA2F,iBAAqBR;AACrBA,qBAAaA,KAAAA,SAAcA,UAAU,GACrC5D,QACE,6BAA6BkE,KAAAC,UAAeF,cAAY,CAAC,OAAOC,KAAAC,UAC9DP,UACF,CAAC,EACH;AAAA,MAAA;AAAC,UAECI,KAAAK,OAAYT,YAAYE,MAAM,GAAC;AAC5B7B,gBAAAA,eAAAA,GACLjC,QAAM,+CAA+C;AAAC;AAAA,MAAA;AAGxDA,cACE,kBAAkBG,QAAOnC,IAAA,cAAmBkG,KAAAC,UAAeL,MAAM,CAAC,OAAOI,KAAAC,UACvEP,UACF,CAAC,KAAKD,YAAY,GACpB,GACAW,WAAAC,UAAqBjE,QAAM;AAAA,QAAAkE,IAAOV;AAAAA,QAAMW,IAAMb;AAAAA,MAAAA,CAAW,GACzDtD,OAAMoE,SAAU;AAAC;AAAA,IAAA;AAGnB1E,YAAM,uCAAuC;AAAA,EAC9CT,GAAAA,QAAAe,QAAAf,QAAAY,SAAAZ,QAAA4D,MAAAA,KAAA5D,EAAA,EAAA;AA3DH,QAAAoF,gBAAsBxB;AA6DrByB,MAAAA;AAAArF,IAAAe,EAAAA,MAAAA,UAAAf,UAAAY,WAGCyE,MAAAC,CAAA,YAAA;AACM9C,8BAAAC,IAA8B1B,MAAM,MACtCN,QAAM,uBAAuBG,OAAO,GACpC0B,QAAKI,kBACLJ,QAAKyB,gBAAiB,GACtB1C,gBAAmB;AAAA,EAEtBrB,GAAAA,QAAAe,QAAAf,QAAAY,SAAAZ,QAAAqF,OAAAA,MAAArF,EAAA,EAAA;AARH,QAAAuF,aAAmBF;AAUlBG,MAAAA;AAAAxF,IAAAe,EAAAA,MAAAA,UAAAf,UAAAY,WAAAZ,EAAA,EAAA,MAAAyB,UAGC+D,MAAAC,CAAA,YAAA;AAAA,QAAA,CACOhE,QAAM;AACTe,gCAAAwB,OAAiCjD,MAAM;AAAC;AAAA,IAAA;AAG1C+B,gBAAAA,IAAgB/B,UAAY,GAC5ByB,0BAAAM,IAA8B/B,QAAQH,OAAO,GAC7C0B,QAAKyB,gBAAiB;AAEtB,UAAA2B,SAAepD,QAAKoD;AAEhBA,sBAAMC,gBACRD,OAAME,MAAAC,UAAiB;AAAA,EAAA,GAE1B7F,QAAAe,QAAAf,QAAAY,SAAAZ,QAAAyB,QAAAzB,QAAAwF,OAAAA,MAAAxF,EAAA,EAAA;AAfH,QAAA8F,aAAmBN;AAiBlBO,MAAAA;AAAA/F,IAAA6B,EAAAA,MAAAA,gBAAA7B,EAAA,EAAA,MAAAe,UAAAf,EAAA8F,EAAAA,MAAAA,cAAA9F,EAAA,EAAA,MAAA4B,YAAA5B,UAAAyB,UAICsE,MAAAC,CAAA,YAAA;AACM,QAAA,CAACvE,UAAUG,UAAQ;AACfnB,cAAA,oBAAoB,GAC1B+B,0BAAAwB,OAAiCjD,MAAM,GACvCkF,YAAAnD,IAAgB/B,UAAa;AAAC;AAAA,IAAA;AAGhCN,QAAAA,QAAM,YAAY,GAClBwF,YAAAnD,IAAgB/B,UAAY,GACxBuB,QAAKK,iBACPL,QAAKK,aAAAuD,QAAsB,6BAA6B,WAAW,GACnE5D,QAAKK,aAAAwD,gBAA8B,SAKjCtE,gBAAgBA,wBAAY8D,aAAuB;AACrDS,UAAAA,YAAgBvE,aAAYwE,YAAe;AAC3CC,YAAAA,cAAoBF,UAASG,cAC3B,8BACF;AACID,UAAAA,gBACFF,YAAYE,cAIdF,UAASI,aAAc,gBAAgB,EAAE,GAACvC,SAAAC,MAAA;AAGxCjD,qBAAYgB,UAAWmE,WACvBA,UAASR,MAAAa,WAAkB,YAC3BL,UAASR,MAAAc,OAAc,YACvBN,UAASR,MAAAe,YAAmB,cAC5B1C,SAAAC,KAAA0C,YAA0BR,SAAS;AACnC,cAAAS,OAAahF,aAAYmB,sBAAuB,GAChD8D,IAAUxE,QAAKyE,UAAWF,KAAIH,MAC9BM,IAAU1E,QAAK2E,UAAWJ,KAAI5D;AAC9BmD,kBAASR,MAAAsB,QAAe,GAAGL,KAAIK,KAAA,MAC/Bd,UAASR,MAAA1C,SAAgB,GAAG2D,KAAI3D,MAAA,MAChCZ,QAAKK,aAAAwE,aAA2Bf,WAAWU,GAAGE,CAAC;AAAA,MAAA;AAAA,IAAC;AAGpDlB,eAAWxD,OAAK;AAAA,EAAC,GAClBtC,QAAA6B,cAAA7B,QAAAe,QAAAf,QAAA8F,YAAA9F,QAAA4B,UAAA5B,QAAAyB,QAAAzB,QAAA+F,OAAAA,MAAA/F,EAAA,EAAA;AA5CH,QAAAoH,kBAAwBrB;AA8CvBsB,MAAAA;AAAArH,IAAAe,EAAAA,MAAAA,UAAAf,UAAAoB,cAGCiG,MAAAjG,cAAcL,OAAMhC,SAAiB8D,CAAAA,MAAAA,2BAAAJ,IAA+B1B,MAAM,GAACf,QAAAe,QAAAf,QAAAoB,YAAApB,QAAAqH,OAAAA,MAAArH,EAAA,EAAA;AAD7E,QAAAsH,2BACED;AAA2EE,MAAAA;AAAAvH,IAAAe,EAAAA,MAAAA,UAAAf,UAAAoB,cAE3EmG,MAAAnG,cACAL,OAAMhC,SAAUgC,OAAMhC,SAAAG,UAAoB,MACxC2D,2BAAAJ,IAA+B1B,MAAM,GAACf,QAAAe,QAAAf,QAAAoB,YAAApB,QAAAuH,OAAAA,MAAAvH,EAAA,EAAA;AAH1CwH,QAAAA,0BACED,KAGFE,iBAAqBjE,kCAAAf,IAAsC1B,MAAM,GAEjE2G,oBACEJ,4BACClG,cAAU,CACRkG,4BAAwB,CACxBE,2BACDpD,mBAAiB,OACrBuD,uBACEH,2BACCpG,cAAU,CACRkG,4BAAwB,CACxBE,2BACDpD,mBAAiB;AAAS,MAAAwD,KAAAC;AAAA7H,IAAA,EAAA,MAAAG,OAAAC,IAAA,2BAAA,KAI1ByH,mCACY,WAAA,qBACH,OAAA;AAAA,IAAApB,UACK;AAAA,IAAUS,OACb;AAAA,IAAMhE,QAAA;AAAA,IAAA4E,cAEC;AAAA,IAAwBC,QAAA;AAAA,EAAA,GAGxC,GAAA/H,QAAA6H,OAAAA,MAAA7H,EAAA,EAAA,GAAA4H,MATFC;AAFJ,QAAAG,gBAAsBJ;AAcrB,MAEG/G,UAAQ;AAAAoH,QAAAA;AAAA,WAAAjI,UAAAjB,YACHkJ,OAAA,oBAAA,UAAA,YAAW,GAAIjI,QAAAjB,UAAAiB,QAAAiI,QAAAA,OAAAjI,EAAA,EAAA,GAAfiI;AAAAA,EAAAA;AAiBJ,QAAAA,MAAAP,qBAAqBM,eAErBE,MAAAP,wBAAwBK;AAAaG,MAAAA;AAAAnI,SAAAA,EAAA,EAAA,MAAAjB,YAAAiB,EAAA8F,EAAAA,MAAAA,cAAA9F,UAAAoF,iBAAApF,EAAA,EAAA,MAAAyD,kBAAAzD,EAAAoH,EAAAA,MAAAA,mBAAApH,EAAAuF,EAAAA,MAAAA,cAAAvF,EAAA,EAAA,MAAAyB,UAAAzB,EAAAiI,EAAAA,MAAAA,OAAAjI,UAAAkI,OAXxCC,MAAA,qBAAA,OACa1G,EAAAA,mBACE2F,aAAAA,iBACLtB,QAAS,YACLrC,YAAa,gBACZE,aAAc,iBAChByB,0BACHG,QAAAA,YAEP0C,UAAAA;AAAAA,IAAAA;AAAAA,IACAlJ;AAAAA,IACAmJ;AAAAA,EAAAA,GACH,GAAMlI,QAAAjB,UAAAiB,QAAA8F,YAAA9F,QAAAoF,eAAApF,QAAAyD,gBAAAzD,QAAAoH,iBAAApH,QAAAuF,YAAAvF,QAAAyB,QAAAzB,QAAAiI,KAAAjI,QAAAkI,KAAAlI,QAAAmI,OAAAA,MAAAnI,EAAA,EAAA,GAZNmI;AAYM;AAIVxH,eAAeH,cAAc;ACrRfE,cAAc,oBAAoB;AAAA,MAE1C0H,oBAA0C,CAAE,GAkB5CC,mBAAmB;AAAA,EAACC,SAAS;AAAc,GAMpCC,UAA2CA,CAAC;AAAA,EACvDC;AAAAA,EACAzJ;AAAAA,EACA6B;AAAAA,EACA6H;AAAAA,EACA5H;AAAAA,EACA6H;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AAAAA,EACAC;AACF,MAAM;AACE/H,QAAAA,SAASC,kBACT+H,WAAWC,eACXlI,WAAWI,OAA8B,IAAI,GAC7C+H,uBAAuB/H,OAAO,IAAI,GAClCgI,UACHH,YAAYhI,OAAOxB,aAAa4J,MAAMC,YAAYrI,OAAOxB,SAAS,KACnE,IAEIpB,QAAQkL,QACZ,MACEC,eACE,CAAC1I,OAAO,GACR6H,YAAY9J,MAAM4K,MAClBC,qBAAqB/G,IAAI1B,MAAM,CACjC,EAAE,CAAC,GACL,CAACA,QAAQH,SAAS6H,YAAY9J,MAAM4K,IAAI,CAC1C;AAEA,MAAIE,gBAAgB1K,UAEhB2K;AAEEC,QAAAA,YAAkBN,QAAQ,MAAM,CAAC;AAAA,IAAC5K,MAAMmC,QAAQnC;AAAAA,EAAAA,CAAK,GAAG,CAACmC,OAAO,CAAC;AAEnE,MAAA,OAAOA,QAAQL,SAAU;AACrB,UAAA,IAAIqJ,MAAM,2CAA2C;AAGzD,MAAA,OAAOhJ,QAAQnC,QAAS;AACpB,UAAA,IAAImL,MAAM,0CAA0C;AAIxD7I,MAAAA,OAAOa,SAAShB,OAAO,GAAG;AAC5B,UAAMpC,OAAO0D,YAAYoC,SAASvD,QAAQH,OAAO,GAC3C,CAACjC,KAAK,IAAI6C,OAAOqI,KAAK9I,QAAQvC,MAAM;AAAA,MAACsL,OAAO;AAAA,IAAE,CAAA,GAC9CC,aAAatB,YAAYuB,cAAcpL,KAC1C2B,CAAUA,UAAAA,MAAMgJ,SAAS3I,QAAQL,KACpC;AACA,QAAI,CAACwJ;AACG,YAAA,IAAIH,MAAM,8CAA8C;AAE5DK,QAAAA,UAAaC,UAAUvL,KAAK,GAAG;AACjC,YAAMwL,UAAgB,CACpB;AAAA,QAAC1L,MAAME,MAAMF;AAAAA,SACb,YACA;AAAA,QAACA,MAAMmC,QAAQnC;AAAAA,MAAAA,CAAK;AAElB2L,aAIF,qBAAC,QAAK,EAAA,GAAI5B,YAEPzJ,UAAAA;AAAAA,QAAAA;AAAAA,QACA,qBAAA,QAAA,EACC,WAAW,CAAC8B,UACZ,WAAU,oBACV,eAAY,oBACZ,KAAKoI,sBAEL,OAAOZ,kBACP,iBAAiB,IAEhBM,UAAAA;AAAAA,UAAAA,eACCA,YAAY;AAAA,YACV0B,aAAajC;AAAAA;AAAAA,YACbrJ,UAAW,oBAAAuL,eAAA,EAAW,MAAgB,CAAA;AAAA,YACtCC,kBAAkBtB;AAAAA,YAClBC;AAAAA,YACA1K,MAAM2L;AAAAA,YACNJ;AAAAA,YACAhB;AAAAA,YACAyB,MAAMT;AAAAA,YACN5L;AAAAA,UAAAA,CACD;AAAA,UACF,CAACwK,eAAgB,oBAAA2B,eAAA,EAAW,MAAgB,CAAA;AAAA,QAAA,EAAA,GAhBxC1J,QAAQnC,IAiBf;AAAA,MAAA,GACF;AAAA,IAAA;AAGE,UAAA,IAAImL,MAAM,kBAAkB;AAAA,EAAA;AAKpC,MAAIhJ,QAAQL,UAAUkI,YAAY9J,MAAM4K,MAAM;AAChC,gBAAA;AACZ,UAAMkB,aAAa,cAAc7J,SAI3BgF,QAAS,WAAWhF,WAAWA,QAAQgF,SAAU;AACvD8D,gBAAY,8CAA8C9D,KAAK;AAC/D,UAAM8E,iBAAiBjC,YAAYkC,OAAO/L,KACvCgM,CAASA,SAAAA,KAAKzM,UAAUyH,KAC3B;AACIiD,mBAAe6B,mBACjBjB,gBAAgBZ,YAAY;AAAA,MAC1BlK,OAAOiC;AAAAA,MACP7B;AAAAA,MACAmK;AAAAA,MACAH;AAAAA,MACA5K,OAAOyH;AAAAA,MACPpH,MAAMmL;AAAAA,MACNI,YAAYW;AAAAA,MACZH,kBAAkBzJ;AAAAA,IAAAA,CACnB;AAEC+J,QAAAA;AAEAJ,QAAAA,eACE,OAAO7J,QAAQiK,SAAU,aAC3BA,QAAQjK,QAAQiK,QAElBnB,aAAa,8BAA8B9I,QAAQkK,QAAQ,uBAAuBD,SAAS,CAAC,KAG1F9J,OAAOgK,YAAY5M,KAAK,KAAKsM,cAAc7J,QAAQkK,UAAU;AACzDE,YAAAA,WAAWvC,YAAYwC,MAAMrM,KAChCgM,YAASA,OAAKzM,UAAUyC,QAAQkK,QACnC;AACIlC,wBAAkBoC,aACpBvB,gBAAgBb,eAAe;AAAA,QAC7BjK,OAAOR;AAAAA,QACPY,UAAU0K;AAAAA,QACVP;AAAAA,QACAH;AAAAA,QACA5K,OAAOyC,QAAQkK;AAAAA,QACftM,MAAMmL;AAAAA,QACNI,YAAYiB;AAAAA,QACZH,OAAO1M,MAAM0M,SAAS;AAAA,QACtBN,kBAAkBzJ;AAAAA,MAAAA,CACnB;AAAA,IAAA;AAICoK,UAAAA,cAA8CC,OAAOC,eACzD;AAAA,MACErM,UAAU0K;AAAAA,MACVc,kBAAkBzJ;AAAAA,MAClBoI;AAAAA,MACA2B;AAAAA,MACAC,UAAUL,aAAa7J,QAAQkK,WAAW3J;AAAAA,MAC1C3C,MAAMmL;AAAAA,MACNZ;AAAAA,MACAnD;AAAAA,MACAmE,YAAYtB,YAAY9J;AAAAA,MACxBR;AAAAA,OAEF,QACA;AAAA,MACEkN,YAAY;AAAA,MACZ5I,MAAM;AACI6I,eAAAA,QAAAA,KACN,0DACF,GACO7C,YAAY9J;AAAAA,MAAAA;AAAAA,IAGzB,CAAA,GAEM4M,yBAAyB7C,cAC3BA,YAAYwC,WAA+B,IAC3CnM;AACJ,+BACG,OAEC,EAAA,GAAIyJ,YACJ,WACA,YAEA,8BAAC,gBACC,EAAA,SACA,UACA,UAEA,UAAA,oBAAC,SAAI,KAAK1H,UAAWyK,iCAAuB,CAAA,EAC9C,CAAA,KAXK3K,QAAQnC,IAYf;AAAA,EAAA;AAIEsL,QAAAA,eAAatB,YAAY+C,aAAa5M,KACzC2B,aAAUA,QAAMgJ,SAAS3I,QAAQL,KACpC;AAEA,MAAI,CAACwJ;AACH,UAAM,IAAIH,MACR,yDAAyDhJ,QAAQL,KAAK,EACxE;AAOFmJ,cAAY;AAEZ,QAAM/K,UAAQ2K,eACZ,CAAC1I,OAAO,GACR6H,YAAY9J,MAAM4K,MAClBC,qBAAqB/G,IAAI1B,MAAM,CACjC,EAAE,CAAC;AAEC0K,MAAAA;AAEJ,MAAI/C,aAAa;AACTgD,UAAAA,SAAyCP,OAAOC,eACpD;AAAA,MACErM,UAAW,oBAAAuL,eAAA,EAAW,MAAgB,CAAA;AAAA,MACtCC,kBAAkBzJ;AAAAA,MAClBoI;AAAAA,MACA1K,MAAMmL;AAAAA,MACNI,YAAAA;AAAAA,MACAhB;AAAAA,MACA5K,OAAOQ;AAAAA,OAET,QACA;AAAA,MACE0M,YAAY;AAAA,MACZ5I,MAAM;AACI6I,eAAAA,QAAAA,KACN,0DACF,GACOvB;AAAAA,MAAAA;AAAAA,IACT,CAEJ;AACA0B,6BAAyB/C,YAAYgD,MAA0B;AAAA,EAAA;AAGjE,SACG,qBAAA,OAAA,EAAuB,GAAIlD,YAAY,WACrCzJ,UAAAA;AAAAA,IAAAA;AAAAA,wBACA,gBAAe,EAAA,SAAkB,UAAoB,UACpD,8BAAC,OAAI,EAAA,KAAK+B,UAAU,iBAAiB,IAClC2K,UAGC,0BAAA,oBAACnB,eAAW,EAAA,OACb,GACH,EACF,CAAA;AAAA,EAAA,EAAA,GAVQ1J,QAAQnC,IAWlB;AAEJ;AAEA8J,QAAQ/H,cAAc;ACzTf,SAAAmL,kBAAA5L,OAAA;AAAAC,QAAAA,IAAAC,EAAA,CAAA;AAAAC,MAAAA;AAAAF,IAAA,CAAA,MAAAD,MAAA6L,cAEH1L,KAAAA,MAAM2L,MAAMlH,KAAAC,UAAe7E,MAAK6L,UAAW,CAAC,GAAC5L,EAAA,CAAA,IAAAD,MAAA6L,YAAA5L,OAAAE,MAAAA,KAAAF,EAAA,CAAA;AAD/C,QAAA8L,cAAoB5L;AAGnBI,MAAAA;AAAAN,IAAA,CAAA,MAAAG,OAAAC,IAAA,2BAAA,KAEcE,KAAA;AAAA,IAAAyL,OAAQ;AAAA,EAAA,GAAO/L,OAAAM,MAAAA,KAAAN,EAAA,CAAA;AAAAuB,MAAAA;AAAA,SAAAvB,SAAA8L,eAAA9L,EAAAD,CAAAA,MAAAA,MAAAhB,YAA5BwC,mCAAa,OAAAjB,IAA0BwL,SAAU,aAC9C/L,UAAAA,MAAKhB,SACR,CAAA,GAAOiB,OAAA8L,aAAA9L,EAAA,CAAA,IAAAD,MAAAhB,UAAAiB,OAAAuB,MAAAA,KAAAvB,EAAA,CAAA,GAFPuB;AAEO;AAIXoK,kBAAkBnL,cAAc;ACahC,MAAMC,UAAQC,cAAc,iBAAiB,GAEvCsL,cAAwB,CAAE,GAmBnBC,OAAQlM,CAAqB,UAAA;AAClC,QAAA;AAAA,IACJmM;AAAAA,IACA1D;AAAAA,IACAzJ;AAAAA,IACAoN;AAAAA,IACA1D;AAAAA,IACAE;AAAAA,IACAyD;AAAAA,IACAC;AAAAA,EACEtM,IAAAA,OACEuM,UAAUpL,OAAoB,IAAI,GAClCqL,qBAAqBC,yBACrBC,gBAAgBzD,YAAY,GAC5B,CAACE,SAASwD,UAAU,IAAIpL,SAAS,EAAK,GACtC,CAACyH,UAAU4D,WAAW,IAAIrL,SAAS,EAAK,GACxC3C,QAAQI,SAASgB,MAAM6M,QACvBpO,OAAa6K,QACjB,MAAO1K,QAAQ,CAAC;AAAA,IAACF,MAAME,OAAOF;AAAAA,KAAO,YAAY;AAAA,IAACA,MAAM0N,KAAK1N;AAAAA,EAAAA,CAAK,IAAI,IACtE,CAACE,OAAOwN,KAAK1N,IAAI,CACnB,GACMoO,kBAAkBxD,QACtB,MAAMZ,YAAYqE,WAAWC,IAAKC,CAAAA,QAAQA,IAAI7O,KAAK,GACnD,CAACsK,YAAYqE,UAAU,CACzB,GACMG,QAAkB5D,QACtB,MACE6D,MACGf,KAAKc,SAASjB,aAAamB,OAAQC,CAAAA,SAClCP,gBAAgBQ,SAASD,IAAI,CAC/B,CACF,GACF,CAACP,iBAAiBV,KAAKc,KAAK,CAC9B,GACMK,kBAAkBtO,MAAMC,QAAQkN,KAAKc,KAAK,IAAId,KAAKc,QAAQjB,aAC3D3B,cAAchB,QAClB,MACEiE,gBACGP,IACEK,YACC,CAACP,gBAAgBQ,SAASD,MAAI,KAC9BzO,OAAO4O,UAAU3O,KAAM4O,CAAQA,QAAAA,IAAI/O,SAAS2O,MAAI,CACpD,EACCD,OAAOM,OAAO,GACnB,CAACH,iBAAiB3O,OAAOkO,eAAe,CAC1C,GAEMa,+BAA+BrD,YAAYnL,SAAS,KAAKuN;AAE/DrK,YAAU,MAAM;AACd,QAAI,CAACsL,8BAA8B;AACjChB,iBAAW,EAAK;AAChB;AAAA,IAAA;AAEIiB,UAAAA,MAAMC,mBAAmBC,aAAatB,kBAAkB;AAE5DoB,WACA/N,QAAQ+N,IAAIhO,MAAMnB,MAAMA,IAAI,KAC5BoP,mBAAmBE,qBAAqBvB,kBAAkB,KAE1DwB,gBAAgB,MAAM;AACpBrB,iBAAW,EAAI;AAAA,IAAA,CAChB;AAAA,EAEF,GAAA,CAACgB,8BAA8BlP,MAAM+N,kBAAkB,CAAC;AAGrDyB,QAAAA,uBAAuBC,YAAY,MAAM;AAC7C,QAAI,CAACP;AACH;AAEFjN,YAAM,wCAAwC;AACxCyN,UAAAA,eAAeC,OAAON,aAAa;AACzC,QAAI,CAACK,cAAc;AACjBvB,kBAAY,EAAK;AACjB;AAAA,IAAA;AAEEuB,QAAAA,gBAAgBA,aAAaE,aAAa,GAAG;AACzCC,YAAAA,QAAQH,aAAaI,WAAW,CAAC;AACnChC,cAAQrK,WAAWoM,MAAME,eAAejC,QAAQrK,OAAO,IACzD0K,YAAY,EAAI,IAEhBA,YAAY,EAAK;AAAA,IAErB;AACEA,kBAAY,EAAK;AAAA,EAAA,GAElB,CAACe,4BAA4B,CAAC;AAEjCtL,YAAU,MAAM;AACd,QAAI,CAACsL;AACH;AAGF,UAAMc,SAAStC,YAAYuC,GAAG,QAAQ,MAAM;AAC/B,iBAAA,EAAK,GAChB9B,YAAY,EAAK;AAAA,IAClB,CAAA,GAEK+B,UAAUxC,YAAYuC,GAAG,SAAS,MAAM;AACtCd,YAAAA,QAAMC,mBAAmBC,aAAatB,kBAAkB;AAE5DoB,eACA/N,QAAQ+N,MAAIhO,MAAMnB,MAAMA,IAAI,KAC5BoP,mBAAmBE,qBAAqBvB,kBAAkB,KAE1DG,WAAW,EAAI,GAEjBsB,qBAAqB;AAAA,IAAA,CACtB,GAEKW,cAAczC,YAAYuC,GAAG,aAAcnM,CAAU,UAAA;AAEvDA,YAAM/C,aACNK,QAAQ0C,MAAM/C,UAAUI,MAAMnB,MAAMA,IAAI,KACxCoP,mBAAmBE,qBAAqBvB,kBAAkB,IAE1DG,WAAW,EAAI,IAEfA,WAAW,EAAK,GAElBsB,qBAAqB;AAAA,IAAA,CACtB;AAED,WAAO,MAAM;AACXQ,aAAOI,eACPF,QAAQE,YAAY,GACpBD,YAAYC,YAAY;AAAA,IAC1B;AAAA,EACC,GAAA,CACD1C,aACA1N,MACA+N,oBACAyB,sBACAN,4BAA4B,CAC7B,GAEDtL,UAAU,MAAM4L,wBAAwB,CAACA,oBAAoB,CAAC;AAExDa,QAAAA,UAAUxF,QAAQ,MAAM;AAC5B,QAAIyF,mBAAmB/P;AAEnBgQ,QAAAA,KAAKC,OAAO7C,IAAI,KAAKA,KAAK5L,UAAUkI,YAAYwG,KAAK1F,SACvD0D,MAAMiC,QAAS9B,CAAS,WAAA;AACtB,YAAMrD,aAAatB,YAAYqE,WAAWlO,KACvCoO,CAAQA,UAAAA,MAAI7O,UAAUiP,MACzB;AACA,UAAIrD,cAAcqC,iBAAiB;AAC3BV,cAAAA,SACJP,OAAOC,eACL;AAAA,UACErM,UAAU+P;AAAAA,UACVvE,kBAAkB+B;AAAAA,UAClBpD;AAAAA,UACA1K;AAAAA,UACAuK;AAAAA,UACAgB;AAAAA,UACA5L,OAAOiP;AAAAA,WAET,QACA;AAAA,UACE/B,YAAY;AAAA,UACZ5I,MAAM;AACI6I,mBAAAA,QAAAA,KACN,0DACF,GACOvB;AAAAA,UAAAA;AAAAA,QACT,CAEJ;AACF+E,2BAAmB1C,gBACjBV,MACF;AAAA,MAAA;AAAA,IACF,CACD,GAEG/M,SAAS0L,YAAYnL,SAAS,KAChCmL,YAAY6E,QAAStD,CAAe,eAAA;AAC5B7B,YAAAA,eAAatB,YAAY4B,YAAYzL,KACxCuQ,OAAMA,EAAE5F,SAASqC,WAAWrL,KAC/B;AACIwJ,UAAAA;AACF,YAAIsC,kBAAkB;AACdX,gBAAAA,WACJP,OAAOC,eACL;AAAA,YACEzM;AAAAA,YACAI,UAAU+P;AAAAA,YACVvE,kBAAkB+B;AAAAA,YAClBpD;AAAAA,YACA1K;AAAAA,YACAuK;AAAAA,YACAgB,YAAAA;AAAAA,YACA5L,OAAOyN;AAAAA,aAET,QACA;AAAA,YACEP,YAAY;AAAA,YACZ5I,MAAM;AACI6I,qBAAAA,QAAAA,KACN,0DACF,GACOvB;AAAAA,YAAAA;AAAAA,UACT,CAEJ;AAEF+E,iDACG,QAAK,EAAA,KAAKxC,SACRD,UAAAA,iBAAiBX,QAAoC,GACxD;AAAA,QAEJ;AAEI,6BAAA,oBAAC,qBAAkB,YACjB,UAAA,oBAAC,UAAK,KAAKY,SAAUwC,4BAAiB,EACxC,CAAA;AAAA,IAAA,CAIP,GAECnQ,SAASgK,cAAa;AAClBxJ,YAAAA,QAAQR,MAAMI,SAASH,KAAMwQ,YAAWA,OAAO3Q,SAAS0N,KAAK1N,IAAI;AACvE,UAAIU,OAAO;AAEHuM,cAAAA,WACJP,OAAOC,eACL;AAAA,UACEf;AAAAA,UACAtL,0CALqB+P,UAAiB,iBAAA,CAAA;AAAA,UAMtCvE,kBAAkB+B;AAAAA,UAClBpD;AAAAA,UACA1K;AAAAA,UACAuL,YAAYtB,YAAYwG;AAAAA,UACxBlG;AAAAA,UACA5K,OAAOgB;AAAAA,WAET,QACA;AAAA,UACEkM,YAAY;AAAA,UACZ5I,MAAM;AACI6I,mBAAAA,QAAAA,KACN,0DACF,GACO7C,YAAYwG;AAAAA,UAAAA;AAAAA,QACrB,CAEJ;AACFH,2BAAmBnG,YAAY+C,QAA+B;AAAA,MAAA;AAAA,IAChE;AAGGoD,WAAAA;AAAAA,EAAAA,GACN,CACDzE,aACA1L,OACAI,UACAmK,SACAiD,MACAc,OACAzO,MACA6N,kBACA1D,aACAyD,iBACA3D,YAAY4B,aACZ5B,YAAYqE,YACZrE,YAAYwG,MACZlG,QAAQ,CACT;AACD,SAAOM,QACL,MACE,oBAAC,aAAyBb,YAAY,KAAK8D,SACxCuC,UADQ1C,QAAAA,GAAAA,KAAK1N,IAEhB,GAEF,CAAC0N,MAAM3D,YAAYqG,OAAO,CAC5B;AACF;AAEA5C,KAAKzL,cAAc;ACpUnB,MAAMC,UAAQC,cAAc,oBAAoB;AAMhC2O,SAAAA,kBACdnD,aACAK,oBACA+C,oBACwD;AAClDC,QAAAA,kBAAkB,CAAC,SAAS,OAAO,SAAS,UAAU,KAAK,GAC3DC,gBAAgBF,sBAAsB,CAAC;AAC7C,SAAO,SAAqBvO,QAA+C;AACzEA,WAAAA,OAAO0O,iBAAkBnN,CAA+C,UAAA;AAEtE6I,aAAOuE,KAAKF,aAAa,EAAEN,QAASS,CAAQ,QAAA;AAC1C,YAAIA,QAAQ;AACCC,qBAAAA,UAAUJ,cAAcG,GAAG,GAAG;AACnCJ,gBAAAA,gBAAgBlC,SAASuC,MAAM;AACjC,oBAAM,IAAIhG,MAAM,cAAcgG,MAAM,eAAe;AAErD,gBAAIC,SAASD,QAAQtN,MAAMwN,WAAW,GAAG;AACvCxN,oBAAMI,eAAe;AACfqN,oBAAAA,eAAeP,cAAcG,GAAG;AACtC,kBAAII,cAAc;AACV3C,sBAAAA,OAAO2C,aAAaH,MAAM;AAChCnP,wBAAM,UAAUmP,MAAM,cAAcxC,IAAI,EAAE,GAC1ClB,YAAY8D,KAAK;AAAA,kBACfxF,MAAM;AAAA,kBACNyF,eAAe;AAAA,oBACbzF,MAAM;AAAA,oBACN0F,WAAW9C;AAAAA,kBACb;AAAA,kBACArM;AAAAA,gBAAAA,CACD;AAAA,cAAA;AAAA,YACH;AAAA,UACF;AAGJ,YAAI4O,QAAQ;AACCC,qBAAAA,UAAUJ,cAAcG,GAAG,GAAG;AACnCJ,gBAAAA,gBAAgBlC,SAASuC,MAAM;AACjC,oBAAM,IAAIhG,MAAM,cAAcgG,MAAM,eAAe;AAErD,gBAAIC,SAASD,QAAQtN,MAAMwN,WAAW,GAAG;AACjCK,oBAAAA,kBAAkBX,cAAcG,GAAG;AACzC,kBAAIQ,iBAAiB;AACbC,sBAAAA,UAAUD,gBAAgBP,MAAM;AACtCQ,wBAAQ9N,OAAOiK,kBAAkB;AAAA,cAAA;AAAA,YACnC;AAAA,UACF;AAAA,MACF,CAEH;AAAA,IAAA,GAEIxL;AAAAA,EACT;AACF;AC7DO,SAASsP,yBAAyB;AAAA,EACvCnE;AAAAA,EACAoE;AAAAA,EACAC;AAKF,GAAG;AACD,QAAMC,gBAAgBF,YAAYG;AAElCH,SAAAA,YAAYG,QAASC,CAAkB,OAAA;AACrCF,kBAAcE,EAAE,GAGd,CAACxE,YAAYyE,YAAAA,EAAcC,QAAQ;AAAA,MAAC,aAAa;AAAA,IAAY,CAAA,KAC7DF,GAAGlG,SAAS,mBAEZ+F,qBAAqBG,EAAE;AAAA,EAAA,GAIpB,MAAM;AACXJ,gBAAYG,QAAQD;AAAAA,EACtB;AACF;AC0CA,MAAM/P,QAAQC,cAAc,oBAAoB,GAE1CmQ,oBAAmC;AAAA,EACvCpK,UAAU;AAAA,EACVpG,YAAY;AAAA,EACZyQ,eAAe;AAAA,EACfpK,MAAM;AAAA,EACNqK,OAAO;AACT,GAmDaC,uBAAuBC,WAGlC,SAA8BlR,OAAOmR,cAAc;AAC7C,QAAA;AAAA,IACJC;AAAAA,IACA3C;AAAAA,IACAE;AAAAA,IACA0C;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAC;AAAAA,IACAnF;AAAAA,IACA3D;AAAAA,IACAC;AAAAA,IACAyD;AAAAA,IACAxD;AAAAA,IACA6I;AAAAA,IACA5I;AAAAA,IACAtJ,WAAWmS;AAAAA,IACXC;AAAAA,IACA7I;AAAAA,IACA,GAAG8I;AAAAA,EACD7R,IAAAA,OAEEwM,qBAAqBC,sBAAAA,GACrBqF,MAAM3Q,OAA8B,IAAI,GACxC,CAAC4Q,iBAAiBC,kBAAkB,IAAIzQ,SAC5C,IACF,GACM,CAAC0Q,iBAAiBC,kBAAkB,IAAI3Q,SAAS,EAAK,GACtD,CAAC4Q,sBAAsBC,wBAAwB,IAAI7Q,SAEvD,CAAA,CAAE;AAIF4P,sBAAAA,cACA,MAAMW,IAAI5P,OACZ;AAEA,QAAMmQ,sBAAsBlR,OAAOsQ,gBAAgB,GAE7CtF,cAAcmG,WAAWC,kBAAkB,GAC3CzR,WAAW0R,YAAYrG,aAAcsG,CAAAA,MACzCA,EAAE5B,QAAQ;AAAA,IAAC,aAAa;AAAA,EAAA,CAAY,CACtC,GACMnI,cAAc8J,YAAYrG,aAAcsG,CAAMA,QAAAA,IAAEC,QAAQC,MAAM,GAC9DpC,cAAcqC,SAAAA,GAEdC,gBAAgBnK,YAAY9J,MAAM4K;AAKxCF,UAAQ,MAAM;AAERxI,QAAAA;AACFJ,aAAAA,MAAM,+BAA+B,GAC9B6P;AAET,UAAMuC,cAAcxD,kBAClBnD,aACAK,oBACA4E,OACF;AAEM,WAAA,MAAA,0BAA0B,GACzB0B,YAAYvC,WAAW;AAAA,EAAA,GAC7B,CAACpE,aAAaiF,SAAS5E,oBAAoB1L,UAAUyP,WAAW,CAAC;AAE9DwC,QAAAA,gBAAgB7E,YACnB8E,CAAAA,WACE,oBAAA,SAAA,EACKA,GAAAA,QACJ,UACA,aACA,aACA,gBACA,aACA,aACA,WAEH,CAAA,GACD,CACEtK,aACAK,YACAjI,UACA6H,aACAC,aACAC,gBACAC,WAAW,CAEf,GAEMmK,aAAa/E,YAEfgF,CAGG,WAAA;AACCA,QAAAA,OAAO9G,KAAK5L,UAAU,QAAQ;AAC5B2S,UAAAA,WACD,oBAAA,MAAA,EACKD,GAAAA,QACJ,aACA,aACA,kBACA,aACA,iBACA,SAEH,CAAA;AACD,UACExB,qBACAwB,OAAO9G,KAAKgH,eACZF,OAAO5T,KAAKA,SAAS;AAErB,eAEI,qBAAA,UAAA,EAAA,UAAA;AAAA,UAAA,oBAAC,UAAK,OAAOwR,mBAAmB,iBAAiB,IAC9CY,+BACH;AAAA,UACCyB;AAAAA,QAAAA,GACH;AAGEE,YAAAA,aAAaH,OAAO9G,KAAKkH;AAC3BD,aAAAA,eACFF,WAAWE,WAAWE,UAAU;AAAA,QAACvU,UAAUmU;AAAAA,MAAS,CAAA,IAE/CA;AAAAA,IAAAA;AAET,WAAOD,OAAOlU;AAAAA,EAEhB,GAAA,CACEmN,aACArL,UACAwL,kBACA1D,aACAyD,iBACAqF,mBACAhJ,WAAW,CAEf,GAEM8K,4BAA4BtF,YAAY,MAAM;AAClD,QAAIyD,gBAAgB;AAClBjR,YAAM,wBAAwBkE,KAAKC,UAAU8M,cAAc,CAAC,EAAE;AAC9D,YAAM8B,sBAAsBlU,mBAC1BoS,gBACApI,eAAegH,YAAYvR,UAAU6T,aAAa,CACpD;AACA,UAAIY,wBAAwB,MAAM;AAChC/S,cACE,mCAAmCkE,KAAKC,UAAU4O,mBAAmB,CAAC,EACxE;AACMC,cAAAA,aAAaC,aAAaF,qBAAqBlD,WAAW;AAC5DmD,uBACF1O,WAAW4O,OAAOrD,aAAamD,UAAU,GAGpCnD,YAAYsD,WAAWC,KAAMC,OAAMA,EAAEtJ,SAAS,eAAe,KAChE0B,YAAY8D,KAAK;AAAA,UACfxF,MAAM;AAAA,UACNjL,WAAWiU;AAAAA,QAAAA,CACZ,GAEHlD,YAAYnL;MAAS;AAAA,IAEzB;AAAA,EACF,GACC,CAACyN,eAAe1G,aAAawF,gBAAgBpB,WAAW,CAAC,GAEtDC,uBAAuBtC,YAC1B8F,CAA0B,cAAA;AACrBvC,QAAAA,oBAAoBA,iBAAiBtS,SAAS,GAAG;AACnD,YAAM8U,iBAA4C,CAAE;AACpDxC,UAAAA,iBAAiBtC,QAAS+E,CAAwB,wBAAA;AAChD,cAAMR,eAAaC,aACjBO,oBAAoB1U,WACpB+Q,WACF;AACA,YAAI,CAAC4D,MAAWC,QAAQV,YAAU,GAAG;AAC/BQ,8BAAoBG,WACtBH,oBAAoBG,QAAQ;AAAA,YAC1BC,cAAc;AAAA,YACdhB,iBAAiBY;AAAAA,YACjBK,QAAQ;AAAA,UAAA,CACT;AAEH;AAAA,QAAA;AAEEC,YAAAA;AACAR,YAAAA,cACFQ,WAAWC,qBAAqBf,cAAYM,SAAS,GAElDQ,YAAYA,aAAad,gBACzBc,aAAa,QAAQd,eACtB;AACMtV,gBAAAA,QAAQyP,mBAAmB6G,SAASlI,kBAAkB,GACtDmI,oBAAoBC,oBACxBxW,OACAoW,UACA9L,WACF;AACIwL,8BAAoBG,WACtBH,oBAAoBG,QAAQ;AAAA,YAC1BC,cAAcK;AAAAA,YACdrB,iBAAiBY;AAAAA,YACjBK,QAAQ;AAAA,UAAA,CACT;AAAA,QAAA;AAMHC,qBAAa,QACfP,eAAelV,KAAK;AAAA,UAClB,GAAIyV,YAAYd;AAAAA,UAChBJ,iBAAiBY;AAAAA,QAAAA,CAClB;AAAA,MAAA,CAEJ,GACGD,eAAe9U,SAAS,GAAG;AAC7BiT,iCAAyB6B,cAAc;AACvC;AAAA,MAAA;AAAA,IACF;AAEF7B,6BAA0BD,4BAEpBA,uBAAqBhT,SAAS,IACzB,KAGFgT,sBACR;AAAA,KAEH,CAAC3F,oBAAoBiF,kBAAkB/I,aAAa6H,WAAW,CACjE;AAGAlO,YAAU,MAAM;AACd,UAAMwS,UAAU1I,YAAYuC,GAAG,SAAS,MAAM;AAC5C8B,2BAAAA,GACAgD,0BAA0B;AAAA,IAC3B,CAAA,GACKsB,iBAAiB3I,YAAYuC,GAAG,iBAAiB,MAAM;AAC3DwD,yBAAmB,EAAI;AAAA,IACxB,CAAA,GACK6C,iBAAiB5I,YAAYuC,GAAG,iBAAiB,MAAM;AAC3DwD,yBAAmB,EAAK;AAAA,IAAA,CACzB;AAED,WAAO,MAAM;AACX2C,cAAQhG,eACRiG,eAAejG,YAAY,GAC3BkG,eAAelG,YAAY;AAAA,IAC7B;AAAA,EAAA,GACC,CAAC1C,aAAaqH,2BAA2BhD,oBAAoB,CAAC,GAGjEnO,UAAU,MAAM;AACVsP,sBAAkB,CAACM,mBACrBuB,0BAA0B;AAAA,EAE3B,GAAA,CAACvB,iBAAiBN,gBAAgB6B,yBAAyB,CAAC;AAE/D,QAAM,CAACwB,wBAAwBC,yBAAyB,IAAI1T,SAAS,EAAK;AAC1Ec,YAAU,MAAM;AACT2S,+BAEHC,0BAA0B,EAAI,GAC9BzE,qBAAqB;AAAA,KAEtB,CAACA,sBAAsBwE,sBAAsB,CAAC,GAEjD3S,UAAU,MAAM;AACTxC,YAAQ4R,kBAAkBY,oBAAoBnQ,OAAO,KACxDsO,wBAEF6B,oBAAoBnQ,UAAUuP;AAAAA,KAC7B,CAACA,kBAAkBjB,oBAAoB,CAAC,GAG3CnO,UAAU,MAAM;AACd,UAAM6S,WAAW5E,yBAAyB;AAAA,MACxCnE;AAAAA,MACAoE;AAAAA,MACAC;AAAAA,IAAAA,CACD;AACD,WAAO,MAAM0E,SAAS;AAAA,EACrB,GAAA,CAAC/I,aAAaoE,aAAaC,oBAAoB,CAAC;AAG7C2E,QAAAA,aAAajH,YAChB3L,CAA8D,UAAA;AACzDgP,aACaA,OAAOhP,KAAK,MAEZnB,UACbmB,MAAMI,eAAe,IAEdJ,MAAMwN,YAAYqF,iBAC3BjJ,YAAY8D,KAAK;AAAA,MACfxF,MAAM;AAAA,MACNyF,eAAe;AAAA,QACbzF,MAAM;AAAA,QACN4K,MAAM9S,MAAMwN,YAAYqF;AAAAA,MAC1B;AAAA,MACApU,QAAQuP;AAAAA,MACRR,aAAaxN;AAAAA,IAAAA,CACd;AAAA,EAAA,GAGL,CAACgP,QAAQpF,aAAaoE,WAAW,CACnC,GAGM+E,cAAcpH,YACjB3L,CAAgE,YAAA;AAC/D,UAAMnE,UAAQyP,mBAAmB6G,SAASlI,kBAAkB,GAMtD/N,OALUmW,oBACdxW,SACAmS,YAAY/Q,WACZkJ,WACF,GACsB9I,MAAMnB,QAAQ,CAAE,GAChC8W,gBAAgBjE,UAAU;AAAA,MAAC/O,OAAAA;AAAAA,MAAOnE,OAAAA;AAAAA,MAAOK;AAAAA,MAAMiK;AAAAA,IAAAA,CAAY;AAE7D6M,qBAAiB,CAAChF,YAAY/Q,aAChC+C,QAAMI,eAAe,GAGrBwJ,YAAY8D,KAAK;AAAA,MAACxF,MAAM;AAAA,IAAA,CAAiB,GAEzC+K,QAAQC,QAAQF,aAAa,EAC1BG,KAAMC,CAAW,aAAA;AACV,YAAA,8CAA8CA,QAAM,GAEtD,CAACA,YAAU,CAACA,SAAOC,UACrBlV,MAAM,uDAAuD,GAE7D6P,YAAYsF,WAAWtT,QAAM6S,aAAa,KACjCO,SAAOC,SAChBrF,YAAYuF,eACVC,aAAaJ,SAAOC,QAA+B;AAAA,QACjDlN;AAAAA,MACD,CAAA,CACH,IAEAsN,QAAQzK,KACN,wDACAoK,QACF;AAAA,IAEH,CAAA,EACAM,MAAOC,CACNF,WAAAA,QAAQE,MAAMA,KAAK,GAEZA,MACR,EACAC,QAAQ,MAAM;AACbhK,kBAAY8D,KAAK;AAAA,QAACxF,MAAM;AAAA,MAAA,CAAsB;AAAA,IAC/C,CAAA,KACMlI,QAAMwN,YAAYqF,iBAC3BjJ,YAAY8D,KAAK;AAAA,MACfxF,MAAM;AAAA,MACNyF,eAAe;AAAA,QACbzF,MAAM;AAAA,QACN4K,MAAM9S,QAAMwN,YAAYqF;AAAAA,MAC1B;AAAA,MACApU,QAAQuP;AAAAA,MACRR,aAAaxN;AAAAA,IAAAA,CACd,GAGH7B,MAAM,uDAAuD;AAAA,EAC/D,GACA,CAACyL,aAAamF,SAAS9E,oBAAoB9D,aAAa6H,WAAW,CACrE,GAEM6F,gBAAmDlI,YACtD3L,CAAU,YAAA;AAIT,QAHIoM,WACFA,QAAQpM,OAAK,GAEX,CAACA,QAAM8T,sBAAsB;AACzB7W,YAAAA,YAAYqO,mBAAmBC,aAAatB,kBAAkB;AAEhEhN,oBAAc,SAChBwF,WAAW4O,OAAOrD,aAAa9O,OAAO6U,MAAM/F,aAAa,CAAE,CAAA,CAAC,GAC5DA,YAAYnL,SAAS,IAEvB+G,YAAY8D,KAAK;AAAA,QAACxF,MAAM;AAAA,QAAkBlI,OAAAA;AAAAA,MAAAA,CAAM;AAC1C+R,YAAAA,eAAezG,mBAAmBC,aAAatB,kBAAkB;AAEnEhN,oBAAc8U,gBAChBnI,YAAY8D,KAAK;AAAA,QACfxF,MAAM;AAAA,QACNjL;AAAAA,MAAAA,CACD;AAAA,IAAA;AAAA,EAEL,GAEF,CAAC2M,aAAawC,SAASnC,oBAAoB+D,WAAW,CACxD,GAEMxE,cAAcmC,YACjB3L,CAAwD,YAAA;AACnDiP,eACFA,QAAQjP,OAAK;AAGTgU,UAAAA,iBAAiBhG,YAAY/Q,YAC/B+Q,YAAY/Q,UAAUI,MAAMnB,KAAK+X,MAAM,GAAG,CAAC,IAC3CpV,QACEqV,aAAaF,iBACdG,KAAKC,WAAWpG,aAAagG,cAAc,IAG5CnV,QACE,CAACwV,GAAGC,YAAY,IAAIH,KAAKI,KAAKvG,aAAa,CAAA,CAAE,GAC7CwG,gBAAgBF,aAAaL,MAAM,GAAG,CAAC,GACvCQ,kBAAkBT,iBACpB7R,KAAKK,OAAOgS,eAAeR,cAAc,IACzC,IACEU,kBAAkBR,aACpB,CAAClG,YAAY2G,YAAYT,UAAU,IACnC;AAEFlG,gBAAY/Q,aAAa2U,MAAW9K,YAAYkH,YAAY/Q,SAAS,KAE7CwX,mBAAmBC,oBAC3CjS,WAAWmS,YACT5G,aACAA,YAAY6G,mBAAmB;AAAA,MAACrK,YAAY,CAAA;AAAA,IAAA,CAAG,CACjD,GACAwD,YAAYnL;EAAS,GAGzB,CAACoM,SAASjB,WAAW,CACvB,GAEM8G,eAAkDnJ,YACrD3L,CAAU,YAAA;AACLkM,cACFA,OAAOlM,OAAK,GAETA,QAAM+U,qBAAqB,KAC9BnL,YAAY8D,KAAK;AAAA,MAACxF,MAAM;AAAA,MAAkBlI,OAAAA;AAAAA,IAAAA,CAAM;AAAA,EAAA,GAGpD,CAAC4J,aAAasC,MAAM,CACtB,GAEM8I,sBAAsBrJ,YACzB3L,CAAsB,YAAA;AACjB8O,qBACFA,cAAc9O,OAAK;AAAA,KAGvB,CAAC8O,aAAa,CAChB,GAkBMmG,oBAAoBtJ,YAAY,MAAM;AAC1C,QAAI,CAACqC,YAAY/Q;AACf;AAEF,UAAMiY,OAAOtV,YAAYuV,yBAAyBnH,WAAW,GACvD;AAAA,MAACoH;AAAAA,IAAAA,IAAiBF;AAExB,QAAI3F,IAAI5P,YAAYyV;AAClB;AAGF,UAAMC,eADSzV,YAAY0V,UAAUtH,WAAW,EACpBzC,aAAa;AACrC,QAAA,CAAC8J,gBAAgBA,aAAavJ,eAAe;AAC/C;AAEIyJ,UAAAA,mBAAmBF,aAAarJ,WAAW,CAAC;AAC9C,QAAA;AACF,YAAMwJ,cAAc5V,YAAY6V,WAC9BzH,aACAA,YAAY/Q,SACd;AACA,OACEuY,YAAYE,gBAAgBH,iBAAiBG,eAC7CF,YAAYG,cAAcJ,iBAAiBI,eAE3CxX,MAAM,6CAA6C,GAEnDkX,cAAcO,gBAEdP,GAAAA,aAAaQ,SAASL,WAAW;AAAA,IAAA,QAE7B;AACNrX,YAAM,qDAAqD,GAE3DsE,WAAWqT,SAAS9H,WAAW,GAE3BA,YAAYvR,SAASG,SAAS,KAChC6F,WAAW4O,OAAOrD,aAAa,CAAC,GAAG,CAAC,CAAC,GAEvCA,YAAYnL,SAAS;AAAA,IAAA;AAAA,EACvB,GACC,CAAC0M,KAAKvB,WAAW,CAAC;AAIrBlO,YAAU,MAAM;AACd,QAAI0P,iBAAiB;AACbuG,YAAAA,mBAAmB,IAAIC,iBAAiBf,iBAAiB;AAC/Dc,aAAAA,iBAAiBE,QAAQzG,iBAAiB;AAAA,QACxC0G,mBAAmB;AAAA,QACnBhQ,YAAY;AAAA,QACZiQ,eAAe;AAAA,QACfC,WAAW;AAAA,QACXC,SAAS;AAAA,MACV,CAAA,GACM,MAAM;AACXN,yBAAiBO,WAAW;AAAA,MAC9B;AAAA,IAAA;AAAA,EACF,GAEC,CAACrB,mBAAmBzF,eAAe,CAAC;AAEjC+G,QAAAA,gBAAgB5K,YACnB3L,CAAyC,YAAA;AACpCvC,UAAM+Y,aACR/Y,MAAM+Y,UAAUxW,OAAK,GAElBA,QAAM8T,mBAAAA,KACT9F,YAAYb,eAAenN,OAAK,GAE7BA,QAAM8T,mBAAmB,KAC5BlK,YAAY8D,KAAK;AAAA,MACfxF,MAAM;AAAA,MACNyF,eAAe;AAAA,QACbzF,MAAM;AAAA,QACNuO,eAAe;AAAA,UACbC,KAAK1W,QAAM0W;AAAAA,UACXC,MAAM3W,QAAM2W;AAAAA,UACZC,QAAQ5W,QAAM4W;AAAAA,UACdC,SAAS7W,QAAM6W;AAAAA,UACfC,SAAS9W,QAAM8W;AAAAA,UACfC,UAAU/W,QAAM+W;AAAAA,QAAAA;AAAAA,MAEpB;AAAA,MACAtY,QAAQuP;AAAAA,MACRR,aAAaxN;AAAAA,IAAAA,CACd;AAAA,EAAA,GAGL,CAACvC,OAAOmM,aAAaoE,WAAW,CAClC,GAEMgJ,cAAcrL,YACjB3L,CAAyC,YAAA;AACpCvC,UAAMwZ,WACRxZ,MAAMwZ,QAAQjX,OAAK,GAEhBA,QAAM8T,mBAAAA,KACTlK,YAAY8D,KAAK;AAAA,MACfxF,MAAM;AAAA,MACNyF,eAAe;AAAA,QACbzF,MAAM;AAAA,QACNuO,eAAe;AAAA,UACbC,KAAK1W,QAAM0W;AAAAA,UACXC,MAAM3W,QAAM2W;AAAAA,UACZC,QAAQ5W,QAAM4W;AAAAA,UACdC,SAAS7W,QAAM6W;AAAAA,UACfC,SAAS9W,QAAM8W;AAAAA,UACfC,UAAU/W,QAAM+W;AAAAA,QAAAA;AAAAA,MAEpB;AAAA,MACAtY,QAAQuP;AAAAA,MACRR,aAAaxN;AAAAA,IAAAA,CACd;AAAA,EAAA,GAGL,CAACvC,OAAOmM,aAAaoE,WAAW,CAClC,GAEMkJ,iCAAiCnQ,QAAQ,MAAM;AAEnD,QAAIsI,4BAA4BxQ;AAIhC,aAAIwQ,4BAA4B,OACvB8H,OAGF,CAACC,SAAsBC,aAAoB;AAChDhI,gCAAwBpF,oBAAoBoN,QAAQ;AAAA,MACtD;AAAA,EAAA,GACC,CAACpN,oBAAoBoF,uBAAuB,CAAC,GAE1CiI,WAA8C3L,YAClD,CAAC,CAAGzP,EAAAA,MAAI,MAAM;AACRqb,QAAAA,qBAAqBvJ,YAAYvR,UAAU0J,WAAW;AACxD,aAAO,CACL;AAAA,QACE/I,QAAQ;AAAA,UACNlB,MAAM,CAAC,GAAG,CAAC;AAAA,UACXF,QAAQ;AAAA,QACV;AAAA,QACAqB,OAAO;AAAA,UACLnB,MAAM,CAAC,GAAG,CAAC;AAAA,UACXF,QAAQ;AAAA,QACV;AAAA,QACA6U,aAAa;AAAA,MAAA,CACd;AAIL,QAAI3U,OAAKU,WAAW;AAClB,aAAO,CAAE;AAEX,UAAMwW,WAASxD,qBAAqB/E,OAAQvC,CAAAA,SAEtCsJ,MAAW9K,YAAYwB,IAAI,IAEzBpM,OAAKU,WAAW,IACX,KAGPuF,KAAKK,OAAO8F,KAAKjL,MAAMnB,MAAMA,MAAI,KACjCiG,KAAKK,OAAO8F,KAAKlL,OAAOlB,MAAMA,MAAI,IAKpC0V,MAAW4F,aAAalP,MAAM;AAAA,MAC5BlL,QAAQ;AAAA,QAAClB,MAAAA;AAAAA,QAAMF,QAAQ;AAAA,MAAC;AAAA,MACxBqB,OAAO;AAAA,QAACnB,MAAAA;AAAAA,QAAMF,QAAQ;AAAA,MAAA;AAAA,IACvB,CAAA,KAAK4V,MAAW7G,SAASzC,MAAMpM,MAAI,CAEvC;AACD,WAAIkX,SAAOxW,SAAS,IACXwW,WAEF,CAAE;AAAA,EAEX,GAAA,CAACpF,aAAa7H,aAAayJ,oBAAoB,CACjD;AAaA,SARA9P,UAAU,MAAM;AACVH,QAAAA,UAAUC,YAAYC,UACxBmO,aACAA,WACF,GACAyB,mBAAmBF,IAAI5P,OAAO;AAAA,EAAA,GAC7B,CAACqO,aAAauB,GAAG,CAAC,GAEhBtF,qBAGEyF,kBAAkB,OACvB;AAAA,IAAC+H;AAAAA,IAAA;AAAA,MACKnI,GAAAA;AAAAA,MACJ,WAAW;AAAA,MACX,WAAWA,UAAUlI,aAAa;AAAA,MAClC;AAAA,MACA,QAAQ0N;AAAAA,MACR,QAAQlC;AAAAA,MACR,SAASpJ;AAAAA,MACT,kBAAkBwL;AAAAA,MAClB,SAASnB;AAAAA,MACT,WAAW0C;AAAAA,MACX,SAASS;AAAAA,MACT,SAASjE;AAAAA,MACT;AAAA,MAGA,mBAAmBlU;AAAAA,MACnB;AAAA,MACA;AAAA,MACA,yBAAyBqY;AAAAA,IAAAA;AAAAA,EAAAA,IAtBpB;AAyBX,CAAC;AAEDxI,qBAAqBxQ,cAAc;"}