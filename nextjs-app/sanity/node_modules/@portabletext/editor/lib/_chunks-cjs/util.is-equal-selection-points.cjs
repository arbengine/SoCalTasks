"use strict";
var types = require("@sanity/types");
function isKeyedSegment(segment) {
  return typeof segment == "object" && segment !== null && "_key" in segment;
}
function getBlockEndPoint({
  node,
  path
}) {
  if (types.isPortableTextTextBlock(node)) {
    const lastChild = node.children[node.children.length - 1];
    if (lastChild)
      return {
        path: [...path, "children", {
          _key: lastChild._key
        }],
        offset: types.isPortableTextSpan(lastChild) ? lastChild.text.length : 0
      };
  }
  return {
    path,
    offset: 0
  };
}
function getBlockStartPoint({
  node,
  path
}) {
  return types.isPortableTextTextBlock(node) ? {
    path: [...path, "children", {
      _key: node.children[0]._key
    }],
    offset: 0
  } : {
    path,
    offset: 0
  };
}
function isEqualSelectionPoints(a, b) {
  return a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path);
}
exports.getBlockEndPoint = getBlockEndPoint;
exports.getBlockStartPoint = getBlockStartPoint;
exports.isEqualSelectionPoints = isEqualSelectionPoints;
exports.isKeyedSegment = isKeyedSegment;
//# sourceMappingURL=util.is-equal-selection-points.cjs.map
