{"version":3,"file":"plugin.event-listener.js","sources":["../../src/editor/create-editor-schema.ts","../../src/editor/define-schema.ts","../../src/internal-utils/debug.ts","../../src/internal-utils/paths.ts","../../src/internal-utils/ranges.ts","../../src/internal-utils/values.ts","../../src/internal-utils/weakMaps.ts","../../src/editor/hooks/usePortableTextEditor.ts","../../src/internal-utils/schema.ts","../../src/editor/mutation-machine.ts","../../src/internal-utils/validateValue.ts","../../src/internal-utils/withChanges.ts","../../src/internal-utils/withoutPatching.ts","../../../../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js","../../src/internal-utils/withUndoRedo.ts","../../src/editor/plugins/createWithUndoRedo.ts","../../src/editor/sync-machine.ts","../../src/editor/components/Synchronizer.tsx","../../src/converters/converter.json.ts","../../src/internal-utils/asserters.ts","../../src/internal-utils/parse-blocks.ts","../../src/converters/converter.portable-text.ts","../../src/converters/converter.text-html.ts","../../src/converters/converter.text-plain.ts","../../src/converters/converters.core.ts","../../src/internal-utils/operationToPatches.ts","../../src/editor/with-applying-behavior-actions.ts","../../src/editor/plugins/create-with-event-listeners.ts","../../src/editor/plugins/createWithMaxBlocks.ts","../../src/editor/plugins/createWithObjectKeys.ts","../../src/internal-utils/applyPatch.ts","../../src/editor/plugins/createWithPatches.ts","../../src/editor/plugins/createWithPlaceholderBlock.ts","../../src/editor/plugins/createWithPortableTextBlockStyle.ts","../../../../node_modules/.pnpm/@portabletext+toolkit@2.0.16/node_modules/@portabletext/toolkit/dist/index.js","../../src/internal-utils/sibling-utils.ts","../../src/editor/plugins/createWithPortableTextMarkModel.ts","../../src/editor/plugins/createWithPortableTextSelections.ts","../../src/editor/plugins/createWithSchemaTypes.ts","../../src/editor/plugins/createWithUtils.ts","../../src/editor/plugins/with-plugins.ts","../../src/editor/create-slate-editor.tsx","../../src/behavior-actions/behavior.action.list-item.ts","../../src/behavior-actions/behavior.action.style.ts","../../src/editor/plugins/createWithEditableAPI.ts","../../src/behavior-actions/behavior.action-utils.insert-block.ts","../../src/behavior-actions/behavior.action.block.set.ts","../../src/behavior-actions/behavior.action.block.unset.ts","../../src/behavior-actions/behavior.action.data-transfer-set.ts","../../src/behavior-actions/behavior.action.insert-block-object.ts","../../src/behavior-actions/behavior.action.insert-blocks.ts","../../src/behavior-actions/behavior.action.insert-break.ts","../../src/behavior-actions/behavior.action.insert-inline-object.ts","../../src/behavior-actions/behavior.action.insert-span.ts","../../src/behavior-actions/behavior.action.insert.block.ts","../../src/behavior-actions/behavior.action.text-block.set.ts","../../src/behavior-actions/behavior.action.text-block.unset.ts","../../src/behavior-actions/behavior.actions.ts","../../src/editor/get-active-decorators.ts","../../src/editor/editor-snapshot.ts","../../src/editor/editor-machine.ts","../../src/editor/get-value.ts","../../src/editor/editor-selector.ts","../../src/editor/key-generator.ts","../../src/editor/create-editor.ts","../../src/editor/editor-actor-context.ts","../../src/editor/hooks/usePortableTextEditorSelection.tsx","../../src/editor/PortableTextEditor.tsx","../../src/editor/editor-provider.tsx","../../src/plugins/plugin.event-listener.tsx"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @public\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title:\n          blockObject.name === 'image' && blockObject.title === undefined\n            ? 'Image'\n            : blockObject.title,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport {assign, emit, setup} from 'xstate'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingPatches: Array<Patch>\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as {type: 'patch'; patch: Patch},\n    input: {} as {\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        },\n  },\n  actions: {\n    'emit has pending patches': emit({type: 'has pending patches'}),\n    'emit mutation': emit(({context}) => ({\n      type: 'mutation' as const,\n      patches: context.pendingPatches,\n      snapshot: fromSlateValue(\n        context.slateEditor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(context.slateEditor),\n      ),\n    })),\n    'clear pending patches': assign({\n      pendingPatches: [],\n    }),\n    'defer patch': assign({\n      pendingPatches: ({context, event}) => [\n        ...context.pendingPatches,\n        event.patch,\n      ],\n    }),\n  },\n  guards: {\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingPatches: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      on: {\n        patch: {\n          actions: ['defer patch', 'emit has pending patches'],\n          target: 'has pending patches',\n        },\n      },\n    },\n    'has pending patches': {\n      after: {\n        [FLUSH_PATCHES_THROTTLED_MS]: [\n          {\n            guard: 'slate is normalizing',\n            target: 'idle',\n            actions: ['emit mutation', 'clear pending patches'],\n          },\n          {\n            reenter: true,\n          },\n        ],\n      },\n      on: {\n        patch: {\n          actions: ['defer patch'],\n          reenter: true,\n        },\n      },\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing initial value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing initial value': emit({\n      type: 'done syncing initial value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      return (\n        !context.readOnly &&\n        (context.isProcessingLocalChanges ||\n          (isChangingRemotely(context.slateEditor) ?? false))\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  on: {\n    'has pending patches': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'setting up': {\n      initial: 'syncing initial value',\n      states: {\n        'syncing initial value': {\n          always: {\n            guard: 'initial value synced',\n            target: 'done syncing initial value',\n          },\n        },\n        'done syncing initial value': {\n          entry: ['emit done syncing initial value'],\n          type: 'final',\n        },\n      },\n    },\n    'syncing': {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            'update value': [\n              {\n                guard: 'is busy',\n                target: 'busy',\n                actions: ['assign pending value'],\n              },\n              {\n                target: 'syncing',\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        busy: {\n          after: {\n            1000: [\n              {\n                guard: 'is busy',\n                reenter: true,\n              },\n              {\n                target: 'syncing',\n              },\n            ],\n          },\n          on: {\n            'update value': [\n              {\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        syncing: {\n          always: {\n            guard: 'pending value equals previous value',\n            target: 'idle',\n            actions: ['clear pending value', 'assign initial value synced'],\n          },\n          invoke: {\n            src: 'sync value',\n            id: 'sync value',\n            input: ({context}) => {\n              return {\n                context: {\n                  keyGenerator: context.keyGenerator,\n                  previousValue: context.previousValue,\n                  readOnly: context.readOnly,\n                  schema: context.schema,\n                },\n                slateEditor: context.slateEditor,\n                streamBlocks: !context.initialValueSynced,\n                value: context.pendingValue,\n              }\n            },\n          },\n          on: {\n            'update value': {\n              actions: ['assign pending value'],\n            },\n            'patch': {\n              actions: [emit(({event}) => event)],\n            },\n            'invalid value': {\n              actions: [emit(({event}) => event)],\n            },\n            'value changed': {\n              actions: [emit(({event}) => event)],\n            },\n            'done syncing': [\n              {\n                guard: 'value changed while syncing',\n                actions: [\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n                reenter: true,\n              },\n              {\n                target: 'idle',\n                actions: [\n                  'clear pending value',\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n\nconst debug = debugWithName('hook:useSyncValue')\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    await new Promise<void>((resolve) => {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length\n\n            // Remove blocks that have become superfluous\n            if (slateValueFromProps.length < childrenLength) {\n              for (\n                let i = childrenLength - 1;\n                i > slateValueFromProps.length - 1;\n                i--\n              ) {\n                Transforms.removeNodes(slateEditor, {\n                  at: [i],\n                })\n              }\n              isChanged = true\n            }\n\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks,\n            })) {\n              // Go through all of the blocks and see if they need to be updated\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value,\n              })\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n            }\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  sendBack({type: 'done syncing', value})\n}\n\nasync function* getBlocks({\n  slateValue,\n  streamBlocks,\n}: {\n  slateValue: Array<Descendant>\n  streamBlocks: boolean\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {useEffect} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {mutationMachine} from '../mutation-machine'\nimport {syncMachine} from '../sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {editorActor, slateEditor} = props\n\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const readOnly = useSelector(props.editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const syncActorRef = useActorRef(syncMachine, {\n    input: {\n      keyGenerator: props.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: props.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n  const mutationActorRef = useActorRef(mutationMachine, {\n    input: {\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n\n  useEffect(() => {\n    const subscription = mutationActorRef.on('*', (event) => {\n      if (event.type === 'has pending patches') {\n        syncActorRef.send({type: 'has pending patches'})\n      }\n      if (event.type === 'mutation') {\n        syncActorRef.send({type: 'mutation'})\n        editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [mutationActorRef, syncActorRef, editorActor])\n\n  useEffect(() => {\n    const subscription = syncActorRef.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.invalid value',\n          })\n          break\n        case 'value changed':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.value changed',\n          })\n          break\n        default:\n          props.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, syncActorRef])\n\n  useEffect(() => {\n    syncActorRef.send({type: 'update readOnly', readOnly})\n  }, [syncActorRef, readOnly])\n\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncActorRef.send({type: 'update value', value})\n  }, [syncActorRef, value])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('patch', (event) => {\n      mutationActorRef.send(event)\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, mutationActorRef, slateEditor])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({context, event}) => {\n    const portableTextConverter = context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      context,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({context, event}) => {\n    const portableTextConverter = context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      context,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import type {TypedObject} from '@sanity/types'\n\nexport function isTypedObject(object: unknown): object is TypedObject {\n  return isRecord(object) && typeof object._type === 'string'\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTypedObject} from './asserters'\n\nexport function parseBlock({\n  context,\n  block,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  block: unknown\n  options: {\n    refreshKeys: boolean\n  }\n}): PortableTextBlock | undefined {\n  if (!isTypedObject(block)) {\n    return undefined\n  }\n\n  if (\n    block._type !== context.schema.block.name &&\n    !context.schema.blockObjects.some(\n      (blockObject) => blockObject.name === block._type,\n    )\n  ) {\n    return undefined\n  }\n\n  if (block._type !== context.schema.block.name) {\n    const _key = options.refreshKeys\n      ? context.keyGenerator()\n      : typeof block._key === 'string'\n        ? block._key\n        : context.keyGenerator()\n    return {\n      ...block,\n      _key,\n    }\n  }\n\n  if (!isPortableTextTextBlock(block)) {\n    return {\n      _type: context.schema.block.name,\n      _key: options.refreshKeys\n        ? context.keyGenerator()\n        : typeof block._key === 'string'\n          ? block._key\n          : context.keyGenerator(),\n      children: [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.span.name,\n          text: '',\n          marks: [],\n        },\n      ],\n      markDefs: [],\n      style: context.schema.styles[0].value,\n    }\n  }\n\n  const markDefKeyMap = new Map<string, string>()\n  const markDefs = (block.markDefs ?? []).flatMap((markDef) => {\n    if (\n      context.schema.annotations.some(\n        (annotation) => annotation.name === markDef._type,\n      )\n    ) {\n      const _key = options.refreshKeys ? context.keyGenerator() : markDef._key\n      markDefKeyMap.set(markDef._key, _key)\n\n      return [\n        {\n          ...markDef,\n          _key,\n        },\n      ]\n    }\n\n    return []\n  })\n\n  const children = block.children.flatMap((child) => {\n    if (!isTypedObject(child)) {\n      return []\n    }\n\n    if (\n      child._type !== context.schema.span.name &&\n      !context.schema.inlineObjects.some(\n        (inlineObject) => inlineObject.name === child._type,\n      )\n    ) {\n      return []\n    }\n\n    if (!isPortableTextSpan(child)) {\n      return [\n        {\n          ...child,\n          _key: options.refreshKeys ? context.keyGenerator() : child._key,\n        },\n      ]\n    }\n\n    const marks = (child.marks ?? []).flatMap((mark) => {\n      if (markDefKeyMap.has(mark)) {\n        return [markDefKeyMap.get(mark)]\n      }\n\n      if (\n        context.schema.decorators.some((decorator) => decorator.value === mark)\n      ) {\n        return [mark]\n      }\n\n      return []\n    })\n\n    return [\n      {\n        ...child,\n        _key: options.refreshKeys ? context.keyGenerator() : child._key,\n        marks,\n      },\n    ]\n  })\n\n  const parsedBlock = {\n    ...block,\n    _key: options.refreshKeys ? context.keyGenerator() : block._key,\n    children:\n      children.length > 0\n        ? children\n        : [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n    markDefs,\n  }\n\n  if (!context.schema.styles.find((style) => style.value === block.style)) {\n    const defaultStyle = context.schema.styles[0].value\n\n    if (defaultStyle !== undefined) {\n      parsedBlock.style = defaultStyle\n    } else {\n      delete parsedBlock.style\n    }\n  }\n\n  if (!context.schema.lists.find((list) => list.value === block.listItem)) {\n    delete parsedBlock.listItem\n    delete parsedBlock.level\n  }\n\n  return parsedBlock\n}\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({context, event}) => {\n    if (!context.selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: context.value,\n      selection: context.selection,\n    })\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({context, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context,\n        block,\n        options: {refreshKeys: true},\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterTextHtml = defineConverter({\n  mimeType: 'text/html',\n  serialize: ({context, event}) => {\n    if (!context.selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: context.value,\n      selection: context.selection,\n    })\n\n    const html = toHTML(blocks, {\n      onMissingComponent: false,\n      components: {\n        unknownType: ({children}) =>\n          children !== undefined ? `${children}` : '',\n      },\n    })\n\n    if (html === '') {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n        reason: 'Serialized HTML is empty',\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: html,\n      mimeType: 'text/html',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({context, event}) => {\n    const blocks = htmlToBlocks(event.data, context.schema.portableText, {\n      keyGenerator: context.keyGenerator,\n      unstable_whitespaceOnPasteMode:\n        context.schema.block.options.unstable_whitespaceOnPasteMode,\n    }) as Array<PortableTextBlock>\n\n    return {\n      type: 'deserialization.success',\n      data: blocks,\n      mimeType: 'text/html',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {isPortableTextTextBlock, type PortableTextBlock} from '@sanity/types'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterTextPlain = defineConverter({\n  mimeType: 'text/plain',\n  serialize: ({context, event}) => {\n    if (!context.selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: context.value,\n      selection: context.selection,\n    })\n\n    const data = blocks\n      .map((block) => {\n        if (isPortableTextTextBlock(block)) {\n          return block.children\n            .map((child) => {\n              if (child._type === context.schema.span.name) {\n                return child.text\n              }\n\n              return `[${\n                context.schema.inlineObjects.find(\n                  (inlineObjectType) => inlineObjectType.name === child._type,\n                )?.title ?? 'Object'\n              }]`\n            })\n            .join('')\n        }\n\n        return `[${\n          context.schema.blockObjects.find(\n            (blockObjectType) => blockObjectType.name === block._type,\n          )?.title ?? 'Object'\n        }]`\n      })\n      .join('\\n\\n')\n\n    return {\n      type: 'serialization.success',\n      data,\n      mimeType: 'text/plain',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({context, event}) => {\n    const html = escapeHtml(event.data)\n      .split(/\\n{2,}/)\n      .map((line) =>\n        line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>',\n      )\n      .join('')\n\n    const textToHtml = `<html><body>${html}</body></html>`\n\n    const blocks = htmlToBlocks(textToHtml, context.schema.portableText, {\n      keyGenerator: context.keyGenerator,\n    }) as Array<PortableTextBlock>\n\n    return {\n      type: 'deserialization.success',\n      data: blocks,\n      mimeType: 'text/plain',\n    }\n  },\n})\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {converterTextHtml} from './converter.text-html'\nimport {converterTextPlain} from './converter.text-plain'\n\nexport const coreConverters = [\n  converterJson,\n  converterPortableText,\n  converterTextHtml,\n  converterTextPlain,\n]\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\n\nconst IS_APPLYING_BEHAVIOR_ACTIONS: WeakMap<Editor, boolean | undefined> =\n  new WeakMap()\n\nexport function withApplyingBehaviorActions(editor: Editor, fn: () => void) {\n  const prev = isApplyingBehaviorActions(editor)\n  IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, true)\n  fn()\n  IS_APPLYING_BEHAVIOR_ACTIONS.set(editor, prev)\n}\n\nexport function isApplyingBehaviorActions(editor: Editor) {\n  return IS_APPLYING_BEHAVIOR_ACTIONS.get(editor) ?? false\n}\n","import {Editor} from 'slate'\nimport {toPortableTextRange} from '../../internal-utils/ranges'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorActions} from '../with-applying-behavior-actions'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          // These events are not relevant for Behaviors\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'error':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'patches':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n          case 'unset':\n            break\n\n          case 'custom.*':\n            editorActor.send({\n              type: 'custom behavior event',\n              behaviorEvent: event.event,\n              editor,\n            })\n            break\n\n          default:\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: event,\n              editor,\n            })\n            break\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    const {\n      deleteBackward,\n      deleteForward,\n      insertBreak,\n      insertData,\n      insertSoftBreak,\n      insertText,\n      select,\n      setFragmentData,\n    } = editor\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak()\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertData(dataTransfer)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'deserialize',\n          dataTransfer,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertSoftBreak()\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText(text, options)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n          options,\n        },\n        editor,\n        defaultActionCallback: () => {\n          insertText(text, options)\n        },\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          selection: toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            range,\n            editorActor.getSnapshot().context.schema,\n          ),\n        },\n        editor,\n        defaultActionCallback: () => {\n          select(location)\n        },\n      })\n      return\n    }\n\n    editor.setFragmentData = (dataTransfer, originEvent) => {\n      if (originEvent === 'drag') {\n        setFragmentData(dataTransfer)\n        return\n      }\n\n      if (isApplyingBehaviorActions(editor)) {\n        setFragmentData(dataTransfer)\n        return\n      }\n\n      dataTransfer.clearData()\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'serialize',\n          dataTransfer,\n          originEvent: originEvent ?? 'unknown',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'notify.unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const addDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n\n  if (editor.selection) {\n    if (Range.isExpanded(editor.selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      // Use new selection\n      const splitTextNodes = Range.isRange(editor.selection)\n        ? [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: Text.isText,\n            }),\n          ]\n        : []\n      const shouldRemoveMark =\n        splitTextNodes.length > 1 &&\n        splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n      if (shouldRemoveMark) {\n        editor.removeMark(mark)\n      } else {\n        splitTextNodes.forEach(([node, path]) => {\n          const marks = [\n            ...(Array.isArray(node.marks) ? node.marks : []).filter(\n              (eMark: string) => eMark !== mark,\n            ),\n            mark,\n          ]\n          Transforms.setNodes(\n            editor,\n            {marks},\n            {at: path, match: Text.isText, split: true, hanging: true},\n          )\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, editor.selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks:\n              existingMarks.length === existingMarksWithoutDecorator.length\n                ? [...existingMarks, mark]\n                : existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: [...existingMarks, mark],\n        }\n        editor.marks = marks as Text\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.toggle'\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    addDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../internal-utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'notify.selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'notify.selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toSlateValue} from '../../internal-utils/values'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport {createOperationToPatches} from '../../internal-utils/operationToPatches'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\n/**\n * @internal\n */\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleListItemActionImplementation: BehaviorActionImplementation<\n  'list item.toggle'\n> = ({context, action}) => {\n  const isActive = isListItemActive({\n    editor: action.editor,\n    listItem: action.listItem,\n  })\n\n  if (isActive) {\n    removeListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.remove'},\n    })\n  } else {\n    addListItemActionImplementation({\n      context,\n      action: {...action, type: 'list item.add'},\n    })\n  }\n}\n\nexport const removeListItemActionImplementation: BehaviorActionImplementation<\n  'list item.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isListBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.unsetNodes(action.editor, ['listItem', 'level'], {at})\n  }\n}\n\nexport const addListItemActionImplementation: BehaviorActionImplementation<\n  'list item.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        level: 1,\n        listItem: action.listItem,\n      },\n      {at},\n    )\n  }\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\nimport {createGuards} from './behavior.guards'\n\nexport const toggleStyleActionImplementation: BehaviorActionImplementation<\n  'style.toggle'\n> = ({context, action}) => {\n  const isActive = isStyleActive({\n    editor: action.editor,\n    style: action.style,\n  })\n\n  if (isActive) {\n    removeStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.remove'},\n    })\n  } else {\n    addStyleActionImplementation({\n      context,\n      action: {...action, type: 'style.add'},\n    })\n  }\n}\n\nexport const removeStyleActionImplementation: BehaviorActionImplementation<\n  'style.remove'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const defaultStyle = context.schema.styles[0].value\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: defaultStyle,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport const addStyleActionImplementation: BehaviorActionImplementation<\n  'style.add'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    return\n  }\n\n  const guards = createGuards(context)\n\n  const selectedBlocks = [\n    ...Editor.nodes(action.editor, {\n      at: action.editor.selection,\n      match: (node) => guards.isTextBlock(node),\n    }),\n  ]\n\n  for (const [, at] of selectedBlocks) {\n    Transforms.setNodes(\n      action.editor,\n      {\n        style: action.style,\n      },\n      {\n        at,\n      },\n    )\n  }\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {isListItemActive} from '../../behavior-actions/behavior.action.list-item'\nimport {isStyleActive} from '../../behavior-actions/behavior.action.style'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => editor.undo(),\n    redo: (): void => editor.redo(),\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block object',\n          blockObject: {\n            name: type.name,\n            value,\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n  const {selection: originalSelection} = editor\n  let paths: AddedAnnotationPaths | undefined = undefined\n\n  if (originalSelection) {\n    if (Range.isCollapsed(originalSelection)) {\n      editor.pteExpandToWord()\n      editor.onChange()\n    }\n\n    // If we still have a selection, add the annotation to the selected text\n    if (editor.selection) {\n      let spanPath: Path | undefined\n      let markDefPath: Path | undefined\n      const markDefPaths: Path[] = []\n\n      if (!editor.selection) {\n        return\n      }\n\n      const selectedBlocks = Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node),\n        reverse: Range.isBackward(editor.selection),\n      })\n\n      for (const [block, blockPath] of selectedBlocks) {\n        if (block.children.length === 0) {\n          continue\n        }\n\n        if (block.children.length === 1 && block.children[0].text === '') {\n          continue\n        }\n\n        const annotationKey = context.keyGenerator()\n        const markDefs = block.markDefs ?? []\n        const existingMarkDef = markDefs.find(\n          (markDef) =>\n            markDef._type === action.annotation.name &&\n            markDef._key === annotationKey,\n        )\n\n        if (existingMarkDef === undefined) {\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: [\n                ...markDefs,\n                {\n                  _type: action.annotation.name,\n                  _key: annotationKey,\n                  ...action.annotation.value,\n                },\n              ],\n            },\n            {at: blockPath},\n          )\n\n          markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n          if (Range.isBackward(editor.selection)) {\n            markDefPaths.unshift(markDefPath)\n          } else {\n            markDefPaths.push(markDefPath)\n          }\n        }\n\n        Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n        const children = Node.children(editor, blockPath)\n\n        for (const [span, path] of children) {\n          if (!editor.isTextSpan(span)) {\n            continue\n          }\n\n          if (!Range.includes(editor.selection, path)) {\n            continue\n          }\n\n          const marks = span.marks ?? []\n          const existingSameTypeAnnotations = marks.filter((mark) =>\n            markDefs.some(\n              (markDef) =>\n                markDef._key === mark &&\n                markDef._type === action.annotation.name,\n            ),\n          )\n\n          Transforms.setNodes(\n            editor,\n            {\n              marks: [\n                ...marks.filter(\n                  (mark) => !existingSameTypeAnnotations.includes(mark),\n                ),\n                annotationKey,\n              ],\n            },\n            {at: path},\n          )\n          spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n        }\n      }\n\n      if (markDefPath && spanPath) {\n        paths = {\n          markDefPath,\n          markDefPaths,\n          spanPath,\n        }\n      }\n    }\n  }\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n\nexport const toggleAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.toggle',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const isActive = isAnnotationActive({\n    editor: action.editor,\n    annotation: {name: action.annotation.name},\n  })\n\n  if (isActive) {\n    removeAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.remove',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  } else {\n    return addAnnotationActionImplementation({\n      context,\n      action: {\n        type: 'annotation.add',\n        annotation: action.annotation,\n        editor: action.editor,\n      },\n    })\n  }\n}\n","import {Editor, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function insertBlock({\n  block,\n  placement,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  if (!editor.selection) {\n    const lastBlock = Array.from(\n      Editor.nodes(editor, {\n        match: (n) => !Editor.isEditor(n),\n        at: [],\n        reverse: true,\n      }),\n    )[0]\n\n    // If there is no selection, let's just insert the new block at the\n    // end of the document\n    Editor.insertNode(editor, block)\n\n    if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], schema)) {\n      // And if the last block was an empty text block, let's remove\n      // that too\n      Transforms.removeNodes(editor, {at: lastBlock[1]})\n    }\n  } else {\n    const [focusBlock, focusBlockPath] = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )[0] ?? [undefined, undefined]\n\n    if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      Transforms.insertNodes(editor, block, {at: nextPath})\n      Transforms.select(editor, {\n        anchor: {path: [nextPath[0], 0], offset: 0},\n        focus: {path: [nextPath[0], 0], offset: 0},\n      })\n    } else if (placement === 'before') {\n      Transforms.insertNodes(editor, block, {at: focusBlockPath})\n    } else {\n      Editor.insertNode(editor, block)\n\n      if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n        Transforms.removeNodes(editor, {at: focusBlockPath})\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockSetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.set'\n> = ({action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    return\n  }\n\n  const {at, editor, type, ...payload} = action\n\n  Transforms.setNodes(action.editor, payload, {at: location})\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockUnsetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.unset'\n> = ({action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    return\n  }\n\n  Transforms.unsetNodes(action.editor, action.props, {at: location})\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const dataTransferSetActionImplementation: BehaviorActionImplementation<\n  'data transfer.set'\n> = ({action}) => {\n  action.dataTransfer.setData(action.mimeType, action.data)\n}\n","import {toSlateValue} from '../internal-utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockObjectActionImplementation: BehaviorActionImplementation<\n  'insert.block object'\n> = ({context, action}) => {\n  const block = toSlateValue(\n    [\n      {\n        _key: context.keyGenerator(),\n        _type: action.blockObject.name,\n        ...(action.blockObject.value ? action.blockObject.value : {}),\n      },\n    ],\n    {schemaTypes: context.schema},\n  )[0]\n\n  insertBlock({\n    block,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {isEqual, uniq} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlocksActionImplementation: BehaviorActionImplementation<\n  'insert.blocks'\n> = ({context, action}) => {\n  const fragment = toSlateValue(action.blocks, {schemaTypes: context.schema})\n\n  if (!action.editor.selection) {\n    return\n  }\n  // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n  const [focusBlock, focusPath] = Editor.node(\n    action.editor,\n    action.editor.selection,\n    {\n      depth: 1,\n    },\n  )\n\n  if (\n    action.editor.isTextBlock(focusBlock) &&\n    action.editor.isTextBlock(fragment[0])\n  ) {\n    const {markDefs} = focusBlock\n    if (!isEqual(markDefs, fragment[0].markDefs)) {\n      Transforms.setNodes(\n        action.editor,\n        {\n          markDefs: uniq([\n            ...(fragment[0].markDefs || []),\n            ...(markDefs || []),\n          ]),\n        },\n        {at: focusPath, mode: 'lowest', voids: false},\n      )\n    }\n  }\n\n  const isPasteToEmptyEditor = isEqualToEmptyEditor(\n    action.editor.children,\n    context.schema,\n  )\n\n  if (isPasteToEmptyEditor) {\n    // Special case for pasting directly into an empty editor (a placeholder block).\n    // When pasting content starting with multiple empty blocks,\n    // `editor.insertFragment` can potentially duplicate the keys of\n    // the placeholder block because of operations that happen\n    // inside `editor.insertFragment` (involves an `insert_node` operation).\n    // However by splitting the placeholder block first in this situation we are good.\n    Transforms.splitNodes(action.editor, {at: [0, 0]})\n    action.editor.insertFragment(fragment)\n    Transforms.removeNodes(action.editor, {at: [0]})\n  } else {\n    // All other inserts\n    action.editor.insertFragment(fragment)\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    if (!selectionAcrossBlocks) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({context, action}) => {\n  // This mimics Slate's internal which also just does a regular insert break\n  // when soft-breaking\n  insertBreakActionImplementation({\n    context,\n    action: {...action, type: 'insert.break'},\n  })\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockActionImplementation: BehaviorActionImplementation<\n  'insert.block'\n> = ({context, action}) => {\n  const parsedBlock = parseBlock({\n    block: action.block,\n    context,\n    options: {refreshKeys: false},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(action.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: action.placement,\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockSetActionImplementation: BehaviorActionImplementation<\n  'text block.set'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      ...(action.style ? {style: action.style} : {}),\n      ...(action.listItem ? {listItem: action.listItem} : {}),\n      ...(action.level ? {level: action.level} : {}),\n    },\n    {at},\n  )\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const textBlockUnsetActionImplementation: BehaviorActionImplementation<\n  'text block.unset'\n> = ({action}) => {\n  const at = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )!\n\n  Transforms.unsetNodes(action.editor, action.props, {at})\n}\n","import {\n  deleteBackward,\n  deleteForward,\n  insertText,\n  Path,\n  Transforms,\n} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  BehaviorAction,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n  toggleAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {\n  addDecoratorActionImplementation,\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {toSlatePath} from '../internal-utils/paths'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {PickFromUnion} from '../type-utils'\nimport {blockOffsetToSpanSelectionPoint} from '../utils/util.block-offset'\nimport {insertBlock} from './behavior.action-utils.insert-block'\nimport {blockSetBehaviorActionImplementation} from './behavior.action.block.set'\nimport {blockUnsetBehaviorActionImplementation} from './behavior.action.block.unset'\nimport {dataTransferSetActionImplementation} from './behavior.action.data-transfer-set'\nimport {insertBlockObjectActionImplementation} from './behavior.action.insert-block-object'\nimport {insertBlocksActionImplementation} from './behavior.action.insert-blocks'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {insertBlockActionImplementation} from './behavior.action.insert.block'\nimport {\n  addListItemActionImplementation,\n  removeListItemActionImplementation,\n  toggleListItemActionImplementation,\n} from './behavior.action.list-item'\nimport {\n  addStyleActionImplementation,\n  removeStyleActionImplementation,\n  toggleStyleActionImplementation,\n} from './behavior.action.style'\nimport {textBlockSetActionImplementation} from './behavior.action.text-block.set'\nimport {textBlockUnsetActionImplementation} from './behavior.action.text-block.unset'\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends BehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'annotation.toggle': toggleAnnotationActionImplementation,\n  'block.set': blockSetBehaviorActionImplementation,\n  'block.unset': blockUnsetBehaviorActionImplementation,\n  'blur': ({action}) => {\n    ReactEditor.blur(action.editor)\n  },\n  'data transfer.set': dataTransferSetActionImplementation,\n  'decorator.add': addDecoratorActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'focus': ({action}) => {\n    ReactEditor.focus(action.editor)\n  },\n  'delete.backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete.forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete.block': ({action}) => {\n    const range = toSlateRange(\n      {\n        anchor: {path: action.blockPath, offset: 0},\n        focus: {path: action.blockPath, offset: 0},\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.removeNodes(action.editor, {\n      at: range,\n    })\n  },\n  'delete.text': ({context, action}) => {\n    const value = fromSlateValue(\n      action.editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(action.editor),\n    )\n\n    const anchor = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.anchor,\n    })\n    const focus = blockOffsetToSpanSelectionPoint({\n      value,\n      blockOffset: action.focus,\n    })\n\n    if (!anchor || !focus) {\n      console.error('Unable to find anchor or focus selection point')\n      return\n    }\n\n    const range = toSlateRange(\n      {\n        anchor,\n        focus,\n      },\n      action.editor,\n    )\n\n    if (!range) {\n      console.error('Unable to find Slate range from selection points')\n      return\n    }\n\n    Transforms.delete(action.editor, {\n      at: range,\n    })\n  },\n  'deserialization.failure': ({action}) => {\n    console.error(\n      `Deserialization of ${action.mimeType} failed with reason ${action.reason}`,\n    )\n  },\n  'deserialization.success': ({context, action}) => {\n    insertBlocksActionImplementation({\n      context,\n      action: {\n        type: 'insert.blocks',\n        blocks: action.data,\n        editor: action.editor,\n      },\n    })\n  },\n  'insert.block': insertBlockActionImplementation,\n  'insert.blocks': insertBlocksActionImplementation,\n  'insert.block object': insertBlockObjectActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert.text block': ({context, action}) => {\n    const block = toSlateValue(\n      [\n        {\n          _key: context.keyGenerator(),\n          _type: context.schema.block.name,\n          style: context.schema.styles[0].value ?? 'normal',\n          markDefs: [],\n          children: action.textBlock?.children?.map((child) => ({\n            ...child,\n            _key: context.keyGenerator(),\n          })) ?? [\n            {\n              _type: context.schema.span.name,\n              _key: context.keyGenerator(),\n              text: '',\n            },\n          ],\n        },\n      ],\n      {schemaTypes: context.schema},\n    )[0]\n\n    insertBlock({\n      block,\n      editor: action.editor,\n      schema: context.schema,\n      placement: action.placement,\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'list item.add': addListItemActionImplementation,\n  'list item.remove': removeListItemActionImplementation,\n  'list item.toggle': toggleListItemActionImplementation,\n  'move.block': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [toSlatePath(action.to, action.editor)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block down': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n    const to = [Path.next(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'move.block up': ({action}) => {\n    const at = [toSlatePath(action.at, action.editor)[0]]\n\n    if (!Path.hasPrevious(at)) {\n      return\n    }\n\n    const to = [Path.previous(at)[0]]\n\n    Transforms.moveNodes(action.editor, {\n      at,\n      to,\n      mode: 'highest',\n    })\n  },\n  'noop': () => {},\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'select.previous block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select previous block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n\n    if (!Path.hasPrevious(blockPath)) {\n      console.error(\"There's no previous block to select\")\n      return\n    }\n\n    const previousBlockPath = Path.previous(blockPath)\n\n    Transforms.select(action.editor, previousBlockPath)\n  },\n  'select.next block': ({action}) => {\n    if (!action.editor.selection) {\n      console.error('Unable to select next block without a selection')\n      return\n    }\n\n    const blockPath = action.editor.selection.focus.path.slice(0, 1)\n    const nextBlockPath = [blockPath[0] + 1]\n\n    Transforms.select(action.editor, nextBlockPath)\n  },\n  'serialization.failure': ({action}) => {\n    console.error(\n      `Serialization of ${action.mimeType} failed with reason ${action.reason}`,\n    )\n  },\n  'serialization.success': ({context, action}) => {\n    dataTransferSetActionImplementation({\n      context,\n      action: {\n        ...action,\n        type: 'data transfer.set',\n      },\n    })\n  },\n  'style.toggle': toggleStyleActionImplementation,\n  'style.add': addStyleActionImplementation,\n  'style.remove': removeStyleActionImplementation,\n  'text block.set': textBlockSetActionImplementation,\n  'text block.unset': textBlockUnsetActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: BehaviorAction\n}) {\n  switch (action.type) {\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nfunction performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<BehaviorAction, 'type', SyntheticBehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.toggle': {\n      behaviorActionImplementations['annotation.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.set': {\n      behaviorActionImplementations['block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.unset': {\n      behaviorActionImplementations['block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'data transfer.set': {\n      behaviorActionImplementations['data transfer.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'deserialization.failure': {\n      behaviorActionImplementations['deserialization.failure']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'deserialization.success': {\n      behaviorActionImplementations['deserialization.success']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block': {\n      behaviorActionImplementations['insert.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.blocks': {\n      behaviorActionImplementations['insert.blocks']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block object': {\n      behaviorActionImplementations['insert.block object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text block': {\n      behaviorActionImplementations['insert.text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.add': {\n      behaviorActionImplementations['list item.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.remove': {\n      behaviorActionImplementations['list item.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'list item.toggle': {\n      behaviorActionImplementations['list item.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block down': {\n      behaviorActionImplementations['move.block down']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block up': {\n      behaviorActionImplementations['move.block up']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.previous block': {\n      behaviorActionImplementations['select.previous block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select.next block': {\n      behaviorActionImplementations['select.next block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'serialization.failure': {\n      behaviorActionImplementations['serialization.failure']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'serialization.success': {\n      behaviorActionImplementations['serialization.success']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.add': {\n      behaviorActionImplementations['style.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.remove': {\n      behaviorActionImplementations['style.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'style.toggle': {\n      behaviorActionImplementations['style.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'text block.set': {\n      behaviorActionImplementations['text block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['text block.unset']({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport {toPortableTextRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  activeDecorators: Array<string>\n  converters: Array<Converter>\n  keyGenerator: () => string\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  schema,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n}) {\n  const value = fromSlateValue(\n    editor.children,\n    schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n  const selection = toPortableTextRange(value, editor.selection, schema)\n\n  const context = {\n    activeDecorators: getActiveDecorators({\n      schema,\n      slateEditorInstance: editor,\n    }),\n    converters,\n    keyGenerator,\n    schema,\n    selection,\n    value,\n  } satisfies EditorContext\n\n  return {\n    context,\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport {\n  isCustomBehaviorEvent,\n  type Behavior,\n  type BehaviorAction,\n  type CustomBehaviorEvent,\n  type NativeBehaviorEvent,\n  type SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport type {Converter} from '../converters/converter.types'\nimport type {NamespaceEvent} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport {withApplyingBehaviorActions} from './with-applying-behavior-actions'\n\nexport * from 'xstate/guards'\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'add behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'remove behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update key generator'\n      keyGenerator: () => string\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\ntype PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\ntype UnsetEvent = {\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing initial value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: SyntheticBehaviorEvent | NativeBehaviorEvent\n      editor: PortableTextSlateEditor\n      defaultActionCallback?: () => void\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | {\n      type: 'custom behavior event'\n      behaviorEvent: CustomBehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | CustomBehaviorEvent\n  | ExternalEditorEvent\n  | MutationEvent\n  | NamespaceEvent<EditorEmittedEvent, 'notify'>\n  | NamespaceEvent<UnsetEvent, 'notify'>\n  | PatchEvent\n  | SyntheticBehaviorEvent\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | EditorEmittedEvent\n  | PatchesEvent\n  | UnsetEvent\n  | {\n      type: 'custom.*'\n      event: CustomBehaviorEvent\n    }\n  | SyntheticBehaviorEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<Behavior>\n      converters: Set<Converter>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      converters?: Array<Converter>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behavior])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behavior)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return new Set(event.behaviors)\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event', 'custom behavior event'])\n\n      const defaultAction =\n        event.type === 'custom behavior event' ||\n        event.behaviorEvent.type === 'copy' ||\n        event.behaviorEvent.type === 'deserialize' ||\n        event.behaviorEvent.type === 'key.down' ||\n        event.behaviorEvent.type === 'key.up' ||\n        event.behaviorEvent.type === 'paste' ||\n        event.behaviorEvent.type === 'serialize'\n          ? undefined\n          : ({\n              ...event.behaviorEvent,\n              editor: event.editor,\n            } satisfies BehaviorAction)\n      const defaultActionCallback =\n        event.type === 'behavior event'\n          ? event.defaultActionCallback\n          : undefined\n\n      const eventBehaviors = [...context.behaviors.values()].filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Performing action \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n            })\n          })\n          return\n        }\n\n        if (!defaultAction) {\n          return\n        }\n\n        withApplyingBehaviorActions(event.editor, () => {\n          Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction,\n              })\n            } catch (error) {\n              console.error(\n                new Error(\n                  `Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                ),\n              )\n            }\n          })\n        })\n        event.editor.onChange()\n        return\n      }\n\n      const editorSnapshot = createEditorSnapshot({\n        converters: [...context.converters],\n        editor: event.editor,\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n      })\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard === undefined ||\n          eventBehavior.guard({\n            context: editorSnapshot.context,\n            event: event.behaviorEvent,\n          })\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: editorSnapshot.context, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            behaviorOverwritten ||\n            (actionIntends.length > 0 &&\n              actionIntends.some(\n                (actionIntend) => actionIntend.type !== 'effect',\n              ))\n\n          withApplyingBehaviorActions(event.editor, () => {\n            Editor.withoutNormalizing(event.editor, () => {\n              for (const actionIntend of actionIntends) {\n                if (actionIntend.type === 'raise') {\n                  if (isCustomBehaviorEvent(actionIntend.event)) {\n                    enqueue.raise({\n                      type: 'custom behavior event',\n                      behaviorEvent: actionIntend.event as CustomBehaviorEvent,\n                      editor: event.editor,\n                    })\n                  } else {\n                    enqueue.raise({\n                      type: 'behavior event',\n                      behaviorEvent: actionIntend.event,\n                      editor: event.editor,\n                    })\n                  }\n                  continue\n                }\n\n                const action = {\n                  ...actionIntend,\n                  editor: event.editor,\n                }\n\n                try {\n                  performAction({context, action})\n                } catch (error) {\n                  console.error(\n                    new Error(\n                      `Performing action \"${action.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                    ),\n                  )\n                  break\n                }\n              }\n            })\n          })\n          event.editor.onChange()\n        }\n\n        if (behaviorOverwritten) {\n          event.nativeEvent?.preventDefault()\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        if (defaultActionCallback) {\n          withApplyingBehaviorActions(event.editor, () => {\n            Editor.withoutNormalizing(event.editor, () => {\n              try {\n                defaultActionCallback()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Performing \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n            })\n          })\n          return\n        }\n\n        if (!defaultAction) {\n          return\n        }\n\n        withApplyingBehaviorActions(event.editor, () => {\n          Editor.withoutNormalizing(event.editor, () => {\n            try {\n              performAction({\n                context,\n                action: defaultAction,\n              })\n            } catch (error) {\n              console.error(\n                new Error(\n                  `Performing action \"${defaultAction.type}\" as a result of \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n                ),\n              )\n            }\n          })\n        })\n        event.editor.onChange()\n      }\n    }),\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set(input.behaviors ?? coreBehaviors),\n    converters: new Set(input.converters ?? []),\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'notify.blurred': {\n      actions: emit(({event}) => ({...event, type: 'blurred'})),\n    },\n    'notify.done loading': {actions: emit({type: 'done loading'})},\n    'notify.error': {actions: emit(({event}) => ({...event, type: 'error'}))},\n    'notify.invalid value': {\n      actions: emit(({event}) => ({...event, type: 'invalid value'})),\n    },\n    'notify.focused': {\n      actions: emit(({event}) => ({...event, type: 'focused'})),\n    },\n    'notify.selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'notify.unset': {actions: emit(({event}) => ({...event, type: 'unset'}))},\n    'notify.loading': {actions: emit({type: 'loading'})},\n    'notify.value changed': {\n      actions: emit(({event}) => ({...event, type: 'value changed'})),\n    },\n\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'patches': {actions: emit(({event}) => event)},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update key generator': {\n      actions: assign({keyGenerator: ({event}) => event.keyGenerator}),\n    },\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'copy' ||\n                event.behaviorEvent.type === 'data transfer.set' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              on: {\n                'done syncing initial value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'custom behavior event': {\n              actions: 'handle behavior event',\n            },\n            'annotation.*': {\n              actions: emit(({event}) => event),\n            },\n            'block.*': {\n              actions: emit(({event}) => event),\n            },\n            'blur': {\n              actions: emit(({event}) => event),\n            },\n            'custom.*': {\n              actions: emit(({event}) => ({type: 'custom.*', event})),\n            },\n            'decorator.*': {\n              actions: emit(({event}) => event),\n            },\n            'delete.*': {\n              actions: emit(({event}) => event),\n            },\n            'focus': {\n              actions: emit(({event}) => event),\n            },\n            'insert.*': {\n              actions: emit(({event}) => event),\n            },\n            'list item.*': {\n              actions: emit(({event}) => event),\n            },\n            'move.*': {\n              actions: emit(({event}) => event),\n            },\n            'select': {\n              actions: emit(({event}) => event),\n            },\n            'select.*': {\n              actions: emit(({event}) => event),\n            },\n            'style.*': {\n              actions: emit(({event}) => event),\n            },\n            'text block.*': {\n              actions: emit(({event}) => event),\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          exit: ['emit ready'],\n          on: {\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing initial value': {\n              target: 'pristine',\n            },\n          },\n        },\n        'pristine': {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                normalizing: {\n                  target: 'normalizing',\n                },\n                patch: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n                mutation: {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n              },\n            },\n            normalizing: {\n              on: {\n                'done normalizing': {\n                  target: 'idle',\n                },\n                'patch': {\n                  actions: 'defer event',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                },\n              },\n            },\n          },\n        },\n        'dirty': {\n          entry: ['emit pending events', 'clear pending events'],\n          on: {\n            patch: {\n              actions: 'emit patch event',\n            },\n            mutation: {\n              actions: 'emit mutation event',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\nexport function getValue({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  return fromSlateValue(\n    slateEditorInstance.children,\n    editorActorSnapshot.context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditorInstance),\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {Editor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\nimport {getValue} from './get-value'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    editor._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: editor._internal.slateEditor.instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({editorActorSnapshot, slateEditorInstance}),\n    },\n  }\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {\n  Behavior,\n  CustomBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types'\nimport {coreConverters} from '../converters/converters.core'\nimport {compileType} from '../internal-utils/schema'\nimport type {EditableAPI} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type ExternalEditorEvent,\n} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @public\n */\nexport type EditorConfig = {\n  /**\n   * @beta\n   */\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  /**\n   * @deprecated Will be removed in the next major version\n   */\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @public\n */\nexport type EditorEvent =\n  | ExternalEditorEvent\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**\n * @public\n */\nexport type Editor = {\n  getSnapshot: () => EditorSnapshot\n  /**\n   * @beta\n   */\n  registerBehavior: (config: {behavior: Behavior}) => () => void\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createEditor(config: EditorConfig): Editor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createEditorFromActor(editorActor)\n}\n\nexport function useCreateEditor(config: EditorConfig): Editor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(() => createEditorFromActor(editorActor), [editorActor])\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    converters: coreConverters,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createEditorFromActor(editorActor: EditorActor): Editor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (config) => {\n      editorActor.send({\n        type: 'add behavior',\n        behavior: config.behavior,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behavior: config.behavior,\n        })\n      }\n    },\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) => {\n      const subscription = editorActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'error':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createEditor, type Editor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: Editor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as Editor\n    } else {\n      this.editor = createEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'mutation': {\n          handleChange(event)\n          break\n        }\n        case 'ready': {\n          handleChange(event)\n          break\n        }\n        case 'selection': {\n          handleChange(event)\n          break\n        }\n        case 'unset': {\n          handleChange(event)\n          break\n        }\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor, handleChange])\n\n  return null\n}\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {useCreateEditor, type Editor, type EditorConfig} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const editor = useCreateEditor(props.initialConfig)\n  const editorActor = editor._internal.editorActor\n  const slateEditor = editor._internal.slateEditor\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor,\n      } as unknown as PortableTextEditorProps),\n    [editor],\n  )\n\n  return (\n    <EditorContext.Provider value={editor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @public\n * Get the current editor context from the `EditorProvider`.\n * Must be used inside the `EditorProvider` component.\n * @returns The current editor object.\n * @example\n * ```tsx\n * import { useEditor } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  const editor = useEditor()\n * }\n * ```\n * @group Hooks\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from '../editor/editor-machine'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @public\n * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:\n *  - 'blurred'\n *  - 'done loading'\n *  - 'editable'\n *  - 'error'\n *  - 'focused'\n *  - 'invalid value'\n *  - 'loading'\n *  - 'mutation'\n *  - 'patch'\n *  - 'read only'\n *  - 'ready'\n *  - 'selection'\n *  - 'value changed'\n *\n * @example\n * Listen and log events.\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n *\n * function MyComponent() {\n *  return (\n *  <EditorProvider>\n *   <EventListenerPlugin\n *    on={(event) => {\n *     console.log(event)\n *    }\n *   } />\n *   { ... }\n * </EditorProvider>\n *  )\n * }\n * ```\n * @example\n * Handle events when there is a mutation.\n * ```tsx\n * <EventListenerPlugin\n *  on={(event) => {\n *    if (event.type === 'mutation') {\n *      console.log('Value changed:', event.snapshot)\n *    }\n *  }}\n * />\n * ```\n * @group Components\n */\nexport function EventListenerPlugin(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, on])\n\n  return null\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","undefined","inlineObject","portableTextSchema","defineField","marks","decorator","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","text","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","compileType","rawType","Schema","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","mutationMachine","setup","context","events","input","emitted","actions","emit","patches","pendingPatches","snapshot","slateEditor","assign","event","patch","guards","slate is normalizing","isNormalizing","createMachine","id","initial","states","on","target","after","guard","reenter","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","unset","description","action","item","i18n","some","blk","index","isPlainObject","String","values","set","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","cld","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childKey","childType","withRemoteChanges","fn","prev","isChangingRemotely","PATCHING","withoutPatching","isPatching","cloneDiff","diff2","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","subscriptions","push","sub","reset","forEach","origin","history","undos","redos","splice","time","Date","unsubscribe","apply","op","getSnapshot","matches","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","undo","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutNormalizing","withoutSaving","normalize","onChange","err","Transforms","deselect","pop","redo","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","every","dType","currentFocus","properties","currentAnchor","newFocus","newProperties","newAnchor","level","blockIndex","newPath","Path","syncValueCallback","sendBack","streamBlocks","syncValueLogic","fromCallback","syncMachine","initialValueSynced","readOnly","assertEvent","pendingValue","previousValue","initial value synced","is busy","isProcessingLocalChanges","value changed while syncing","pending value equals previous value","actors","always","entry","idle","busy","syncing","invoke","src","updateValue","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","Promise","resolve","i","currentBlock","currentBlockIndex","getBlocks","slateValue","blockChanged","blockValid","syncBlock","error","setTimeout","oldBlock","hasChanges","validationValue","validation","console","warn","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","setNodes","isTextBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","delete","insertText","voids","Synchronizer","props","$","useSelector","_temp","_temp2","t0","t1","t2","t3","t4","syncActorRef","useActorRef","t5","t6","mutationActorRef","t7","t8","subscription","send","useEffect","t10","t9","subscription_0","event_0","bb15","t11","t12","t13","t14","t15","event_1","t16","s_0","s","displayName","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","isTypedObject","isRecord","parseBlock","refreshKeys","markDefKeyMap","Map","flatMap","markDef","isPortableTextSpan","has","parsedBlock","defaultStyle","listItem","converterPortableText","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","converterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","unstable_whitespaceOnPasteMode","converterTextPlain","inlineObjectType","blockObjectType","textToHtml","escapeHtml","split","line","replace","entityMap","str","coreConverters","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","blockKey","keys","Object","keyName","val","indexOf","insertNodePatch","position","targetKey","node","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetBlock","targetChild","childToInsert","IS_APPLYING_BEHAVIOR_ACTIONS","withApplyingBehaviorActions","isApplyingBehaviorActions","createWithEventListeners","maxBlocks","behaviorEvent","deleteBackward","deleteForward","insertBreak","insertData","insertSoftBreak","setFragmentData","unit","dataTransfer","defaultActionCallback","location","clearData","createWithMaxBlocks","rows","createWithObjectKeys","normalizeNode","existingKeys","Node","descendants","isEditor","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","nextPath","next","insertNode","createWithPortableTextBlockStyle","nodeEntry","SlateText","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","isBefore","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","nextNode","mergeNodes","parent","orphanedAnnotations","markDefKeys","Set","newMarkDefs","add","previousSelectionIsCollapsed","isCollapsed","newSelectionIsCollapsed","focusSpan","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","targetPath","oldDefs","addDecoratorActionImplementation","hanging","splitTextNodes","removeMark","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","removeDecoratorActionImplementation","isDecoratorActive","selectedTextNodes","toggleDecoratorActionImplementation","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","isListBlock","isPortableTextListBlock","element","obj","isInline","createWithUtils","pteExpandToWord","textNode","focusOffset","charsBefore","charsAfter","isEmpty","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","Number","isNaN","setSelection","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","unsubscriptions","instance","withReact","createEditor","initialValue","toggleListItemActionImplementation","isListItemActive","removeListItemActionImplementation","addListItemActionImplementation","createGuards","selectedBlocks","unsetNodes","toggleStyleActionImplementation","isStyleActive","removeStyleActionImplementation","addStyleActionImplementation","createEditableAPI","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","focusBlock","descendant","focusChild","insertChild","focusChildPath","focusNode","move","distance","insertBlock","placement","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","toDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","SlateElement","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","reduce","accMarkDefs","markKey","originalSelection","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","marksWithoutAnnotation","toggleAnnotationActionImplementation","focusBlockPath","lastBlock","blockSetBehaviorActionImplementation","payload","blockUnsetBehaviorActionImplementation","dataTransferSetActionImplementation","setData","insertBlockObjectActionImplementation","insertBlocksActionImplementation","fragment","splitNodes","insertFragment","insertBreakActionImplementation","anchorBlockPath","nextNodePath","newMarkDefKeys","prevNodeSpans","prevNodeSpan","newMarks","insertSoftBreakActionImplementation","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","insertBlockActionImplementation","textBlockSetActionImplementation","textBlockUnsetActionImplementation","behaviorActionImplementations","delete.backward","delete.forward","delete.block","delete.text","blockOffsetToSpanSelectionPoint","blockOffset","deserialization.failure","deserialization.success","insert.text","insert.text block","effect","move.block","to","moveNodes","move.block down","move.block up","hasPrevious","previous","noop","newSelection","select.previous block","previousBlockPath","select.next block","nextBlockPath","serialization.failure","serialization.success","performAction","performDefaultAction","getActiveDecorators","slateEditorInstance","createEditorSnapshot","activeDecorators","editorMachine","behaviors","behavior","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","message","editorSnapshot","behaviorOverwritten","eventBehavior","shouldRun","actionIntendSets","actionSet","actionIntends","actionIntend","isCustomBehaviorEvent","raise","nativeEvent","preventDefault","coreBehaviors","initialReadOnly","exit","normalizing","mutation","editorActorSnapshot","defaultCompare","a","b","useEditorSelector","selector","compare","_internal","getEditorSnapshot","defaultKeyGenerator","randomKey","getByteHexTable","table","whatwgRNG","rnds8","Uint8Array","getRandomValues","createActor","editorConfigToMachineInput","start","createEditorFromActor","useCreateEditor","schemaDefinition","hasOwnProperty","editable","registerBehavior","listener","EditorActorContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","useState","startTransition","PortableTextEditor","Component","change$","Subject","constructor","schemaType","parseInt","componentDidUpdate","prevProps","editorRef","current","setEditable","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EditorContext","React","EditorProvider","initialConfig","portableTextEditor","useEditor","EventListenerPlugin"],"mappings":"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","x_google_ignoreList":[13,34]}