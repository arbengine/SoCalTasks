import { useEditor } from "../_chunks-es/plugin.event-listener.js";
import { EventListenerPlugin } from "../_chunks-es/plugin.event-listener.js";
import { c } from "react-compiler-runtime";
import React, { useEffect } from "react";
import { createMarkdownBehaviors } from "../_chunks-es/behavior.markdown.js";
const EditorRefPlugin = React.forwardRef((_, ref) => {
  const $ = c(2), editor = useEditor(), portableTextEditorRef = React.useRef(editor);
  let t0, t1;
  return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = () => portableTextEditorRef.current, t1 = [], $[0] = t0, $[1] = t1) : (t0 = $[0], t1 = $[1]), React.useImperativeHandle(ref, t0, t1), null;
});
EditorRefPlugin.displayName = "EditorRefPlugin";
function MarkdownPlugin(props) {
  const editor = useEditor();
  return useEffect(() => {
    const unregisterBehaviors = createMarkdownBehaviors(props.config).map((behavior) => editor.registerBehavior({
      behavior
    }));
    return () => {
      for (const unregisterBehavior of unregisterBehaviors)
        unregisterBehavior();
    };
  }, [editor, props.config]), null;
}
export {
  EditorRefPlugin,
  EventListenerPlugin,
  MarkdownPlugin
};
//# sourceMappingURL=index.js.map
