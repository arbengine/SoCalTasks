{
  "version": 3,
  "sources": ["../../../sanity/src/presentation/loader/LiveQueries.tsx"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-shadow */\nimport {\n  type ClientPerspective,\n  type ContentSourceMap,\n  createClient,\n  type LiveEventMessage,\n  type QueryParams,\n  type SyncTag,\n} from '@sanity/client'\nimport {applySourceDocuments, getPublishedId} from '@sanity/client/csm'\nimport {\n  type ChannelInstance,\n  type Controller,\n  createConnectionMachine,\n  type StatusEvent,\n} from '@sanity/comlink'\nimport {\n  createCompatibilityActors,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@sanity/presentation-comlink'\nimport isEqual from 'fast-deep-equal'\n// import {createPreviewSecret} from '@sanity/preview-url-secret/create-secret'\nimport {memo, useDeferredValue, useEffect, useMemo, useState} from 'react'\nimport {\n  type SanityClient,\n  type SanityDocument,\n  useClient,\n  // useCurrentUser,\n  useDataset,\n  useProjectId,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\n// import {useEffectEvent} from 'use-effect-event'\nimport {MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL} from '../constants'\nimport {\n  type LiveQueriesState,\n  type LiveQueriesStateValue,\n  type LoaderConnection,\n  type PresentationPerspective,\n} from '../types'\nimport {type DocumentOnPage} from '../useDocumentsOnPage'\nimport {mapChangedValue, useQueryParams, useRevalidate} from './utils'\n\nexport interface LoaderQueriesProps {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  controller: Controller | undefined\n  perspective: ClientPerspective\n  onLoadersConnection: (event: StatusEvent) => void\n  onDocumentsOnPage: (\n    key: string,\n    perspective: PresentationPerspective,\n    state: DocumentOnPage[],\n  ) => void\n}\n\nexport default function LoaderQueries(props: LoaderQueriesProps): React.JSX.Element {\n  const {\n    liveDocument: _liveDocument,\n    controller,\n    perspective: activePerspective,\n    onLoadersConnection,\n    onDocumentsOnPage,\n  } = props\n\n  const [comlink, setComlink] = useState<ChannelInstance<LoaderControllerMsg, LoaderNodeMsg>>()\n  const [liveQueries, setLiveQueries] = useState<LiveQueriesState>({})\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  useEffect(() => {\n    const interval = setInterval(\n      () =>\n        setLiveQueries((liveQueries) => {\n          if (Object.keys(liveQueries).length < 1) {\n            return liveQueries\n          }\n\n          const now = Date.now()\n          const hasAnyExpired = Object.values(liveQueries).some(\n            // eslint-disable-next-line max-nested-callbacks\n            (liveQuery) =>\n              liveQuery.heartbeat !== false && now > liveQuery.receivedAt + liveQuery.heartbeat,\n          )\n          if (!hasAnyExpired) {\n            return liveQueries\n          }\n          const next = {} as LiveQueriesState\n          for (const [key, value] of Object.entries(liveQueries)) {\n            if (value.heartbeat !== false && now > value.receivedAt + value.heartbeat) {\n              continue\n            }\n            next[key] = value\n          }\n          return next\n        }),\n      MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL,\n    )\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    if (controller) {\n      const comlink = controller.createChannel<LoaderControllerMsg, LoaderNodeMsg>(\n        {\n          name: 'presentation',\n          connectTo: 'loaders',\n          heartbeat: true,\n        },\n        createConnectionMachine<LoaderControllerMsg, LoaderNodeMsg>().provide({\n          actors: createCompatibilityActors<LoaderControllerMsg>(),\n        }),\n      )\n      setComlink(comlink)\n\n      comlink.onStatus(onLoadersConnection)\n\n      comlink.on('loader/documents', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          onDocumentsOnPage(\n            'loaders',\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data.perspective as unknown as any,\n            data.documents,\n          )\n        }\n      })\n\n      comlink.on('loader/query-listen', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          if (\n            typeof data.heartbeat === 'number' &&\n            data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n          ) {\n            throw new Error(\n              `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n            )\n          }\n          setLiveQueries((prev) => ({\n            ...prev,\n            [getQueryCacheKey(data.query, data.params)]: {\n              perspective: data.perspective,\n              query: data.query,\n              params: data.params,\n              receivedAt: Date.now(),\n              heartbeat: data.heartbeat ?? false,\n            } satisfies LiveQueriesStateValue,\n          }))\n        }\n      })\n\n      return comlink.start()\n    }\n    return undefined\n  }, [controller, dataset, onDocumentsOnPage, onLoadersConnection, projectId])\n\n  // const currentUser = useCurrentUser()\n  // const handleCreatePreviewUrlSecret = useEffectEvent(\n  //   async ({projectId, dataset}: {projectId: string; dataset: string}) => {\n  //     try {\n  //       // eslint-disable-next-line no-console\n  //       console.log('Creating preview URL secret for ', {projectId, dataset})\n  //       const {secret} = await createPreviewSecret(\n  //         client,\n  //         '@sanity/presentation',\n  //         typeof window === 'undefined' ? '' : location.href,\n  //         currentUser?.id,\n  //       )\n  //       return {secret}\n  //     } catch (err) {\n  //       // eslint-disable-next-line no-console\n  //       console.error('Failed to generate preview URL secret', err)\n  //       return {secret: null}\n  //     }\n  //   },\n  // )\n  // useEffect(() => {\n  //   return comlink?.on('loader/fetch-preview-url-secret', (data) =>\n  //     handleCreatePreviewUrlSecret(data),\n  //   )\n  // }, [comlink, handleCreatePreviewUrlSecret])\n\n  const [syncTagsInUse] = useState(() => new Set<SyncTag[]>())\n  const [lastLiveEventId, setLastLiveEventId] = useState<string | null>(null)\n  const studioClient = useClient({apiVersion: '2023-10-16'})\n  const clientConfig = useMemo(() => studioClient.config(), [studioClient])\n  const client = useMemo(\n    () =>\n      studioClient.withConfig({\n        resultSourceMap: 'withKeyArraySelector',\n      }),\n    [studioClient],\n  )\n  useEffect(() => {\n    if (comlink) {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const {projectId, dataset} = clientConfig\n      comlink.post('loader/perspective', {\n        projectId: projectId!,\n        dataset: dataset!,\n        perspective: activePerspective,\n      })\n    }\n  }, [comlink, clientConfig, activePerspective])\n\n  const handleSyncTags = useEffectEvent((event: LiveEventMessage) => {\n    const flattenedSyncTags = Array.from(syncTagsInUse).flat()\n    const hasMatchingTags = event.tags.some((tag) => flattenedSyncTags.includes(tag))\n    if (hasMatchingTags) {\n      setLastLiveEventId(event.id)\n    } else {\n      // eslint-disable-next-line no-console\n      console.log('No matching tags found', event.tags, {flattenedSyncTags})\n    }\n  })\n  useEffect(() => {\n    const liveClient = createClient(client.config()).withConfig({\n      // Necessary for the live drafts to work\n      apiVersion: 'vX',\n    })\n    const subscription = liveClient.live\n      .events({includeDrafts: true, tag: 'presentation-loader'})\n      .subscribe({\n        next: (event) => {\n          if (event.type === 'message') {\n            handleSyncTags(event)\n          } else if (event.type === 'restart') {\n            setLastLiveEventId(event.id)\n          } else if (event.type === 'reconnect') {\n            setLastLiveEventId(null)\n          }\n        },\n        // eslint-disable-next-line no-console\n        error: (err) => console.error('Error validating EventSource URL:', err),\n      })\n    return () => subscription.unsubscribe()\n  }, [client, handleSyncTags])\n\n  /**\n   * Defer the liveDocument to avoid unnecessary rerenders on rapid edits\n   */\n  const liveDocument = useDeferredValue(_liveDocument)\n\n  return (\n    <>\n      {Object.entries(liveQueries).map(([key, {query, params, perspective}]) => (\n        <QuerySubscription\n          key={`${key}${perspective}`}\n          projectId={clientConfig.projectId!}\n          dataset={clientConfig.dataset!}\n          perspective={perspective}\n          query={query}\n          params={params}\n          comlink={comlink}\n          client={client}\n          liveDocument={liveDocument}\n          lastLiveEventId={lastLiveEventId}\n          syncTagsInUse={syncTagsInUse}\n        />\n      ))}\n    </>\n  )\n}\n\ninterface SharedProps {\n  /**\n   * The Sanity client to use for fetching data and listening to mutations.\n   */\n  client: SanityClient\n}\n\ninterface QuerySubscriptionProps\n  extends Pick<UseQuerySubscriptionProps, 'client' | 'liveDocument' | 'lastLiveEventId'> {\n  projectId: string\n  dataset: string\n  perspective: ClientPerspective\n  query: string\n  params: QueryParams\n  comlink: LoaderConnection | undefined\n  syncTagsInUse: Set<SyncTag[]>\n}\nfunction QuerySubscriptionComponent(props: QuerySubscriptionProps) {\n  const {\n    projectId,\n    dataset,\n    perspective,\n    query,\n    client,\n    liveDocument,\n    comlink,\n    lastLiveEventId,\n    syncTagsInUse,\n  } = props\n\n  const params = useQueryParams(props.params)\n  const {\n    result,\n    resultSourceMap,\n    syncTags: tags,\n  } = useQuerySubscription({\n    client,\n    liveDocument,\n    params,\n    perspective,\n    query,\n    lastLiveEventId,\n  }) || {}\n\n  const handleQueryChange = useEffectEvent(\n    (\n      comlink: LoaderConnection | undefined,\n      perspective: ClientPerspective,\n      query: string,\n      params: QueryParams,\n      result: unknown,\n      resultSourceMap: ContentSourceMap | undefined,\n      tags: `s1:${string}`[] | undefined,\n      // eslint-disable-next-line max-params\n    ) => {\n      comlink?.post('loader/query-change', {\n        projectId,\n        dataset,\n        perspective,\n        query,\n        params,\n        result,\n        resultSourceMap,\n        tags,\n      })\n    },\n  )\n  useEffect(() => {\n    if (resultSourceMap) {\n      handleQueryChange(comlink, perspective, query, params, result, resultSourceMap, tags)\n    }\n    if (Array.isArray(tags)) {\n      syncTagsInUse.add(tags)\n      return () => {\n        syncTagsInUse.delete(tags)\n      }\n    }\n    return undefined\n  }, [\n    comlink,\n    handleQueryChange,\n    params,\n    perspective,\n    query,\n    result,\n    resultSourceMap,\n    syncTagsInUse,\n    tags,\n  ])\n\n  return null\n}\nconst QuerySubscription = memo(QuerySubscriptionComponent)\nQuerySubscription.displayName = 'Memo(QuerySubscription)'\n\ninterface UseQuerySubscriptionProps extends Required<Pick<SharedProps, 'client'>> {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  query: string\n  params: QueryParams\n  perspective: ClientPerspective\n  lastLiveEventId: string | null\n}\nfunction useQuerySubscription(props: UseQuerySubscriptionProps) {\n  const {liveDocument, client, query, params, perspective, lastLiveEventId} = props\n  const [snapshot, setSnapshot] = useState<{\n    result: unknown\n    resultSourceMap?: ContentSourceMap\n    syncTags?: SyncTag[]\n    lastLiveEventId: string | null\n  } | null>(null)\n  // Make sure any async errors bubble up to the nearest error boundary\n  const [error, setError] = useState<unknown>(null)\n  if (error) throw error\n\n  const [revalidate, startRefresh] = useRevalidate({\n    // Refresh interval is set to zero as we're using the Live Draft Content API to revalidate queries\n    refreshInterval: 0,\n  })\n  const shouldRefetch =\n    revalidate === 'refresh' ||\n    revalidate === 'inflight' ||\n    lastLiveEventId !== snapshot?.lastLiveEventId\n  useEffect(() => {\n    if (!shouldRefetch) {\n      return undefined\n    }\n\n    let fulfilled = false\n    let fetching = false\n    const controller = new AbortController()\n    // eslint-disable-next-line no-inner-declarations\n    async function effect() {\n      const {signal} = controller\n      fetching = true\n      const {result, resultSourceMap, syncTags} = await client.fetch(query, params, {\n        lastLiveEventId,\n        tag: 'presentation-loader',\n        signal,\n        perspective,\n        filterResponse: false,\n        returnQuery: false,\n      })\n      fetching = false\n\n      if (!signal.aborted) {\n        setSnapshot((prev) => ({\n          result: isEqual(prev?.result, result) ? prev?.result : result,\n          resultSourceMap: isEqual(prev?.resultSourceMap, resultSourceMap)\n            ? prev?.resultSourceMap\n            : resultSourceMap,\n          syncTags: isEqual(prev?.syncTags, syncTags) ? prev?.syncTags : syncTags,\n          lastLiveEventId,\n        }))\n        fulfilled = true\n      }\n    }\n    const onFinally = startRefresh()\n    effect()\n      .catch((error) => {\n        fetching = false\n        if (error.name !== 'AbortError') {\n          setError(error)\n        }\n      })\n      .finally(onFinally)\n    return () => {\n      if (!fulfilled && !fetching) {\n        controller.abort()\n      }\n    }\n  }, [client, lastLiveEventId, params, perspective, query, shouldRefetch, startRefresh])\n\n  const {result, resultSourceMap, syncTags} = snapshot ?? {}\n  return useMemo(() => {\n    if (liveDocument && resultSourceMap) {\n      return {\n        result: turboChargeResultIfSourceMap(liveDocument, result, perspective, resultSourceMap),\n        resultSourceMap,\n        syncTags,\n      }\n    }\n    return {result, resultSourceMap, syncTags}\n  }, [liveDocument, perspective, result, resultSourceMap, syncTags])\n}\n\nexport function turboChargeResultIfSourceMap<T = unknown>(\n  liveDocument: Partial<SanityDocument> | null | undefined,\n  result: T,\n  perspective: ClientPerspective,\n  resultSourceMap?: ContentSourceMap,\n): T {\n  if (perspective === 'raw') {\n    throw new Error('turboChargeResultIfSourceMap does not support raw perspective')\n  }\n  return applySourceDocuments(\n    result,\n    resultSourceMap,\n    (sourceDocument) => {\n      // If there's a displayed document, always prefer it\n      if (\n        // If _projectId is set, it's a cross dataset reference and we should skip it\n        !sourceDocument._projectId &&\n        liveDocument?._id &&\n        getPublishedId(liveDocument._id) === getPublishedId(sourceDocument._id)\n      ) {\n        if (typeof liveDocument._id === 'string' && typeof sourceDocument._type === 'string') {\n          return liveDocument as unknown as Required<Pick<SanityDocument, '_id' | '_type'>>\n        }\n        return {\n          ...liveDocument,\n          _id: liveDocument._id || sourceDocument._id,\n          _type: liveDocument._type || sourceDocument._type,\n        }\n      }\n      return null\n    },\n    mapChangedValue,\n    perspective,\n  )\n}\n\nfunction getQueryCacheKey(query: string, params: QueryParams | string): `${string}-${string}` {\n  return `${query}-${typeof params === 'string' ? params : JSON.stringify(params)}`\n}\n"],
  "mappings": "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",
  "names": ["LoaderQueries", "props", "liveDocument", "_liveDocument", "controller", "perspective", "activePerspective", "onLoadersConnection", "onDocumentsOnPage", "comlink", "setComlink", "useState", "liveQueries", "setLiveQueries", "projectId", "useProjectId", "dataset", "useDataset", "useEffect", "interval", "setInterval", "Object", "keys", "length", "now", "Date", "values", "some", "liveQuery", "heartbeat", "receivedAt", "next", "key", "value", "entries", "MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL", "clearInterval", "createChannel", "name", "connectTo", "createConnectionMachine", "provide", "actors", "createCompatibilityActors", "onStatus", "on", "data", "documents", "Error", "prev", "getQueryCacheKey", "query", "params", "start", "syncTagsInUse", "Set", "lastLiveEventId", "setLastLiveEventId", "studioClient", "useClient", "apiVersion", "clientConfig", "useMemo", "config", "client", "withConfig", "resultSourceMap", "post", "handleSyncTags", "useEffectEvent", "event", "flattenedSyncTags", "Array", "from", "flat", "tags", "tag", "includes", "id", "console", "log", "subscription", "createClient", "live", "events", "includeDrafts", "subscribe", "type", "error", "err", "unsubscribe", "useDeferredValue", "map", "QuerySubscriptionComponent", "$", "_c", "useQueryParams", "result", "syncTags", "useQuerySubscription", "t0", "comlink_0", "perspective_0", "query_0", "params_0", "result_0", "resultSourceMap_0", "tags_0", "handleQueryChange", "t1", "t2", "isArray", "add", "delete", "QuerySubscription", "memo", "displayName", "snapshot", "setSnapshot", "setError", "Symbol", "for", "refreshInterval", "revalidate", "startRefresh", "useRevalidate", "shouldRefetch", "fulfilled", "fetching", "AbortController", "effect", "signal", "fetch", "filterResponse", "returnQuery", "aborted", "isEqual", "onFinally", "catch", "error_0", "finally", "abort", "t3", "syncTags_0", "t4", "t5", "turboChargeResultIfSourceMap", "t6", "bb0", "applySourceDocuments", "sourceDocument", "_projectId", "_id", "getPublishedId", "_type", "mapChangedValue", "JSON", "stringify"]
}
